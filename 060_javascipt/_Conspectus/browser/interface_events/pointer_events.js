
/// События указателя

/*
Если вы не разрабатываете под старые браузеры, такие как Internet Explorer 10, Safari 12, 
или более ранние версии, больше нет необходимости использовать события мыши или касаний – 
можно переходить сразу на события указателя.
*/

// Схема именований событий указателя похожа на события мыши:
/*
Событие указателя	Аналогичное событие мыши
pointerdown	        mousedown
pointerup	        mouseup
pointermove	        mousemove
pointerover	        mouseover
pointerout	        mouseout
pointerenter	    mouseenter
pointerleave	    mouseleave
pointercancel	    -
gotpointercapture	-
lostpointercapture	-

Можно просто заменить события mouse... на аналогичные pointer... в коде.
Хотя, возможно, кое-где понадобится добавить touch-action: none в CSS

*/

// Свойства событий указателя
/*
pointerId   – уникальный идентификатор указателя (генерир. браузером).

pointerType – тип указывающего устройства: «mouse», «pen» или «touch».

isPrimary   – true для основного указателя (первый палец в мульти-тач).


Дополнительные свойства (редко поддерживаются):

width       – ширина области соприкосновения указателя с устройством. 
    Если не поддерживается, например мышью, то всегда равно 1.

height      – высота области соприкосновения указателя с устройством. 
    Если не поддерживается, например мышью, то всегда равно 1.

pressure    – степень давления указателя в диапазоне от 0 до 1. 
    Для устройств, которые не поддерживают давление, принимает значение 0.5 (нажато) либо 0.

tangentialPressure – нормализованное тангенциальное давление.

tiltX, tiltY, twist – специфичные для пера свойства, описывающие положение пера 
    относительно сенсорной поверхности.
*/


// Мульти-тач (возможность касаться сразу нескольких мест)
// не поддерживают события мыши
/*
1. При касании первым пальцем происходит pointerdown с isPrimary=true и pointerId.
2. При касании вторым и последующими пальцами (при остающемся первом):
происходит несколько pointerdown с isPrimary=false и уникальным pointerId для каждого касания.
*/ 


// Событие: pointercancel
/*
происходит, когда текущее действие с указателем по какой-то причине прерывается, 
и события указателя больше не генерируются.

Предотвращайте действие браузера по умолчанию, чтобы избежать pointercancel:
1. Предотвратить запуск встроенного drag’n’drop. Мы можем сделать это, задав 
    ball.ondragstart = () => false
2. Добавив в CSS свойство #ball { touch-action: none }
*/ 


// Захват указателя

// elem.setPointerCapture(pointerId) –  меняет target всех событий с данным pointerId на elem
/*
Эта привязка отменяется:
автоматически, при возникновении события pointerup или pointercancel,
автоматически, если elem удаляется из документа,
при вызове elem.releasePointerCapture(pointerId).

Захват указателя используется для упрощения операций с переносом (drag’n’drop) элементов.
*/

thumb.onpointerdown = function(event) {
  // все события указателя перенаправить на thumb (пока не произойдёт 'pointerup')
  thumb.setPointerCapture(event.pointerId);
};

thumb.onpointermove = function(event) {
  // перемещение ползунка: все события перенаправлены на этот обработчик
  let newLeft = event.clientX - slider.getBoundingClientRect().left;
  thumb.style.left = newLeft + 'px';
};

// примечание: нет необходимости вызывать thumb.releasePointerCapture,


// События при захвате указателя

// gotpointercapture    - срабатывает, когда элемент использует setPointerCapture 
//      для включения захвата.

// lostpointercapture   - срабатывает при освобождении от захвата: 
//      явно с помощью releasePointerCapture или автоматически, когда происходит 
//      событие pointerup/pointercancel.