// ------------------- СОБЫТИЯ И EventEmitter
// Некоторые более сложные API-интерфейсы основаны на событиях
// Обычно так происходит, когда API-интерфейс разработан относительно объекта,
//      когда функция обратного вызова должна вызываться много раз
//      или когда может требоваться множество типов функций обратного вызова

// Класс net.Server - его объект представляют серверный сокет
// Его события:
//      listening   - начинает прослушивание подключений
//      connection  - при каждом подключении клиента
//      close       - закрыт

const EventEmitter = require('events');
const net = require('net');
let server = new net.Server(); // Создать объект Server
server instanceof EventEmitter; // => true: объекты Server являются экземплярами EventEmitter
server.on('connection', socket => {
    // Передаем данные и отключаемся
    socket.end('Hello World', 'utf8 ');
});

// Можно использовать addListener() для регистрации прослушивателей событий
// Для одноразового запуска once()
// Для их удаления: off() или removeListener()
// Aункции обработчиков событий вызываются синхронно друг за другом
// Обраб-к можно применять асинхронным образом, используя setTimeout()
// setImmediate() вызывает функцию немедленно после обработки всех ожидающих колбэков и событий
// emit() обеспечивает вызов обработ-в событий
// Используя API-интерфейс событий, нужно регистрировать обработчик для событий "error"

// --------------- Каналы
// Каналы соединяются два потока вместе (чтение и запись), например, с помощью метода .pipe()
