
HELP
man git-<команда>
git help <команда>
git <команда> --help
git <команда> -h     // Посмотреть только список опций

НАСТРОЙКИ GIT
git --version     // Смотреть версию гита
git config --list                 // см. настройки
git config --list --show-origin   // см. настройки + их расположение
git config --global user.name "John Doe"    // устан. имя польз-ля
git config --global user.email joh@exam.com // устан. email
git config --global core.excludesfile ~/.gitexcludes  // исключения для компьютера

ИНИЦИАЛИЗАЦИЯ   
git init  // созд. дир. .git с начальн. настройками
Содержание дир. .git
    config
    description
    HEAD      // указывает на текущий коммит в рабоч. области
    hooks/    // запуск пользовательских скриптов по событиям
    info/     // глоб. настройки игнор. файлов (если не нужны в .gitignore)
    objects/  // база данных объектов Git
    refs/     // ссылки на объекты коммитов в этой базе
    index     // хранится содержимое индекса

КЛОНИРОВАНИЕ
git clone <ссылка>          // клонир. в текущий каталог
git clone <ссылка> mylibgit // клонир. в каталог mylibgit
git svn clone -s <ссылка>   // клонир. svn репо
    -s – понимать стандартные папки SVN (trunk, branches, tags)
    <ссылка> м.б.:
        https://...
        /home/username/...
        ssh://...
        git://...

ЗАБРАТЬ ИЗМЕНЕНИЯ ИЗ РЕПО
git fetch <адрес>   // загрузка содержимого из указ. репо (по умолч. из клонир-го)
git merge <адрес>/<текущая-ветка>   // созд. коммит слияния
git merge origin/master
git pull             // (fetch + merge) извлечь всё из репо (по умолч. из клонир-го)
git pull --no-commit <адрес>  // без создания нового коммита
git pull --rebase <адрес>     // вместо "git merge" испол-ся "git rebase"

ОТПРАВИТЬ ИЗМЕНЕНИЯ В УДАЛЕННЫЙ РЕПО
git push --set-upstream origin main // связать ветку с удален., чтобы писать "git push"
git push <remote-name> <branch-name>
git push origin main                // запушить изменения на удален. репо
git push origin master -f           // принудительно запушить (опасно)
git push origin master --tags         // Отправляет метки
git push origin origin/develop:master // Изменяет указатель для удаленной ветке
Добавляет ветку test в удаленный репозиторий origin, указывающую на коммит ветки develop:
git push origin origin/develop:refs/heads/test

REBASE
git -rebase   // сохранить коммиты последовательно и избежать ненужных слияний
Синхронизация с main центрального репозитория, используя перебазирование:
    git checkout main
    git pull --rebase origin


УДАЛЕННОЕ ПОДКЛЮЧЕНИЕ К РЕПО
git remote                  // см. репозитории
git remote -v               // см. репозитории + их url
git remote show upstream    // подробн. вывод о конфигурации удал. репо
git remote add origin <url> // созд. нов. подключения к удал. репо
git remote rm <name>        // удаляет подключение 
git remote rename <old-name> <new-name>   // переимен. удален. подключения 

ПРОВЕРИТЬ СОСТОЯНИЕ ФАЙЛОВ
git status
git status -s       // Сокращенный вывод статуса
git status --short  // то же самое

ПРОИНДЕКСИРОВАТЬ
git add README  
    // добав. в гит 
    // проиндексир. /
    // указ. файл, исправленный в конфликте слияния
git add *           // добавить всё в текущем каталоге
git add .           // добавить всё в текущем каталоге
git add -a          // добавить всё в текущем каталоге

ЗАФИКСИРОВАТЬ ИЗМЕНЕНИЯ
git commit              // зафиксировать изменения
git commit -m "comment" // набрать свой комментарий к коммиту
git commit -a           // add + commit
git commit -v           // перед коммитом подробн. инф.

ПЕРЕМЕСТИТЬ / ПЕРЕИМЕНОВАТЬ
git mv README.md README         // переименовать файл из README.md в README
git mv README.md /src/README.md // переместить в дир. src

ВРЕМЕННОЕ ИГНОРИРОВАНИЕ ФАЙЛОВ
git update-index --assume-unchanged <file>     // игнорировать <file>
git update-index --no-assume-unchanged <file>  // отключить игнорирование

СМОТРЕТЬ ОТЛИЧИЯ
git show COMMIT_TAG // показать изменения, внесенные отдельным коммитом
git diff            // смотреть непроиндексированные изменения
git diff --staged   // Изменения, внесенные в индекс
git diff --cached   // Изменения, внесенные в индекс. Синоним --staged
git diff HEAD       // по сравнению с последним коммитом
git diff HEAD^      // Предпоследним коммитом
git diff master..experimental   // Можно сравнивать «головы» веток
git diff experimental           // активную ветку с какой-либо
git blame README     // построчную информацию о файле в последнем коммите
git annotate README  // построчную информацию о файле в последнем коммите
git blame -L 2,+3 README // информацию по трем строкам, начиная со второй

ПОИСК В ПРОЕКТЕ
git grep            // поиск слов по проекту
git grep tst        // Ищет слова tst в проекте
git grep -с tst     // Подсчитывает число упоминаний tst
git grep tst v1     // Ищет в старой версии проекта
git grep -e 'first' --and -e 'another' // где упомин. first' и 'another'

ИСТОРИЯ КОММИТОВ
git log                   // перечисляет коммиты
git log README            // историю отдельного файла
git log — README          // если версия git не совсем свежая
git log -p                // подробную информацию о каждом патче
git log -p -2             // разницу, внесенную в каждый коммит (2 записи)
git log --stat            // Статистика изменения файлов
git log --summary         // инф. по созданиям, переименованиям и правам доступа
git log -S <string>       // там, где добавляется или удаляется эта строка
git log -- path/to/file   // те коммиты, в которых были изменения этих файлов
git log --pretty=oneline  // каждый из коммитов по строчке, состоящей из хэша
git log --pretty=oneline --graph  // добавится небольшой граф в формате ASCII
git log --pretty=full/fuller      // полная информация о коммитах
    oneline               // каждый коммит в одну строку
    short, full и fuller  // делают вывод приблизительно в том же формате
    format:"%h - %an, %ar : %s"
        %h  - Сокращенный хеш коммита
        %an - Имя автора
        %ar - Относительная дата автора
        %s  - Содержание
    ...
git log --since=2.weeks   // за последние две недели
        --author          // фильтровать по автору коммита
        --grep            // искать по ключевым словам

УДАЛИТЬ ИЗ ИНДЕКСА:
git rm             // удалить файл из индекса и каталога
git rm -f          // принудительное удаление
git rm log/\*.log  // можно передавать файлы, каталоги или шаблоны
git rm --cached <file>  - удалить файл из индекса, но не в каталоге
git rm Documentation/\*.txt   // удаляются сразу все файлы txt
git rm -r --cached .  // Вносит в индекс все удаленные файлы

ОТКАТ ДО БЕЗ КОММИТА:
git restore <file>         // откат непроиндексированных изменений
git restore --stage <file> // откат проиндексированных изменений

ОТКАТ С НОВЫМ КОМИТОМ:
git checkout <file>        // Вернуть файл (или просто вытащить из прошлого коммита)
git checkout HEAD~2 <file> // к состоянию на два коммита назад
git revert config-modify-tag    // Отменяет коммит, помеченный тегом
git revert cgsjd2h         // Отменяет коммит, используя его хэш
git revert cgsjd2h -m 1  // отмена коммита слияния, нужно указ. хэш и номер одного из родителей коммита
    (Состояние проекта не должно отличаться от состояния, зафиксир. последним коммитом)

ПЕРЕКЛЮЧЕНИЕ НА ДРУГОЙ КОММИТ
git checkout <хэш-сумма> // переключение на коммит по его хеш-сумме

ОТКАТ ДО УКАЗАННОГО КОММИТА:
1) 'Мягкий' сброс:
git reset --soft HEAD^ // 'мягкий' сброс на последний коммит

2) 'Жёсткий' сброс:
git reset --hard HEAD~3  // три последних коммита будут удалены!!!

git reset  // Сбросить весь индекс или удалить из него изменения
git reset — EDITEDFILE    // Удаляет из индекса конкретный файл

РАБОТА С ВЕТКАМИ
git branch                 // список локальных веток
git branch -a              // список лок. и удаленных веток
git branch <new_branch>    // СОЗДАТЬ новую ветку, но не переключает на неё
git branch -d <new_branch> // УДАЛИТЬ ветку "new_branch"
git branch -D <new_branch> // УДАЛИТЬ без смердживания
git branch -m <new_name>   // ПЕРЕИМЕНОВАТЬ
git branch --contains v1.2 // Показ. ветки, среди предков которых есть опред. коммит
git checkout -b dev        // создать ветку "dev" и перекл. на неё
git checkout -f dev        // перекл. без спроса (помогает, если есть незакомит. изм-я)
git checkout -m dev  // перед перекл-ем попробует залить изменения в текущую ветку
git merge-base master <new_branch> // Показ. коммит ответвления ветки new_branch от master

Схоже с checkout, но checkout работает только с указателем HEAD, 
а reset перемещает указатель HEAD и указатель текущей ветки
git reset    (аналогично: reset --mixed <хеш коммита>)
git reset --hard

git merge new_branch   // смерджить ветку "new_branch" с текущей

ТЕГИ
2 вида:
    1) аннотированные // полноценная ветка
    2) легковесные    // указатель с именем
Теги отправляются на сервер только явно:
    git push origin v1
    git push --tags       // отправить все теги
git tag       // см. теги
git tag v1    // создать легковесный тег "v1"
git tag -a R2020.4 -m "Realise 2020.4" // создать аннотированный тег

