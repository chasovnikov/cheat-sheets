Ссылка на ГИТХАБ с описанием:
https://github.com/sindresorhus/awesome-npm#tips

Команды из оф. док-ии:
https://docs.npmjs.com/cli/v8/commands

package-lock.json   создается после установки первого модуля 
    и обновляется при добавлении новой зависимости.
    Содержит описание состояния текущей иерархии модулей (всё дерево зависимостей)
    Генерируется командой npm install

package-lock.json имеет более высокий приоритет в сравнении package.json

Модули устан-ся в папку node_modules той директории, откуда была вызвана команда npm i

В node_modules/.bin локально установленные пакеты размещают свои исполняемые модули.
Запускаем ./node_modules/.bin/mocha в директории проекта...

./node_modules/.bin/<команда>       запустить локально установленный исполняемый модуль.


--save            -S   (в npm5 по умолч.) сохран. в "dependencies"
--save-dev        -D   сохраняет в "devDependencies"
--no-save              не сохраняет в package.json
--save-optional   -O   сохраняет в "optionalDependencies"
--no-optional          не устанавливать в "optionalDependencies"


npm install   (устан. пакеты, прописанные в package.json и созд. package-lock.json)

npm install --production    только нужные для работы зависимости из dependencies

npm ci      игнорирует package.json и устанавливает модули по package-lock.json

npm -v              узнать версию
npm install pkg     установить пакет pkg
npm i pkg           ТОЖЕ

npm i --global pkg      установить пакет глобально
npm i -g pkg            ТОЖЕ

npm i --save pkg        внести в список зависимостей в файл package.json
npm i -S pkg            ТОЖЕ

npm i --save-dev nodemon      
    -dev        - только для разработки
npm i -D nodemon        ТОЖЕ

npm init        Инициализация нового пакета, появится package.json
npm init -y       проскочить вопросы во время иниц-ии
npm init -f       тоже

npm update              обновить все пакеты, описанные в package.json
npm update express      обновление конкретного модуля

npm uninstall eslint	        удалить пакет
npm uninstall express --save    также удалить его из package.json

npm test    тестирование
npm t

npm it      → npm install && npm test
npm r       → npm uninstall
npm un      → npm uninstall
npm up      → npm update

//------------npm run <task-name>---------------

Если в package.json:
  "scripts": {
      "start-dev": "node lib/server-development",
      "start": "node lib/server-production"

// to run Webpack:
      "watch": "webpack --watch --progress --colors --config webpack.conf.js",
      "dev": "webpack --progress --colors --config webpack.conf.js",
      "prod": "NODE_ENV=production webpack -p --config webpack.conf.js",
    }

npm run start-dev

//---------------------------

npm i -g ntl    установить интерактивное меню
ntl

npm ls --depth 0        проверка зависимостей
npm ls -g --depth 0     проверка зависимостей глобально

npm run env | grep "$PATH"      найти дополн-ую папку к PATH, <директория проекта>/node_modules/.bin
npm run env             увидеть все доступные переменные окружения

npm repo        открыть соответствующий репозиторий в браузере
npm home        выполняет ту же функцию для записи homepage
npm docs        открыть пакет на официальном сайте

npm version patch       обновить версию пакета
npm version minor       тоже
npm version major       тоже

alias ni='npm install'
alias nid='npm install --save-dev'
alias nig='npm install --global'
alias nt='npm test'
alias nit='npm install && npm test'
alias nk='npm link'
alias nr='npm run'
alias ns='npm start'
alias nf='npm cache clean && rm -rf node_modules && npm install'
alias nlg='npm list --global --depth=0'

npm install express@4.16.4              указать версию пакета
npm install express@">4.15.0 <4.16.0"   диапазон версий
npm install express@latest              последняя версия

^    последний минорный релиз
~    последний патч-релиз

	ДЛЯ ПОЧИНКИ NODEMON:
npm -g uninstall nodemon
npm -g install nodemon

nvm    управляет версиями node. js и npm

npx         упрощает использование CLI-утилит и других исполняемых файлов:
https://medium.com/devschacht/introducing-npx-an-npm-package-runner-a72a658cd9e6
• Использование локально установленных утилит без npm run-script
• Исполнение команд, вызываемых однократно
• Запуск команд с различными версиями Node.js
• Разработка интерактивных npm-скриптов
• Поделитесь своими скриптами с друзьями и близкими!
• Бонус: автофоллбек для shell

which npx   проверить установку npx

Полезные команды (требуют соответ-е пакеты):

npx http-server .     Запустить сервер
npx gitignore node    Создать .gitignore файл
npx wait-port 9000    Подождать, пока определённый порт будет открыт ( выполнится только тогда, когда что-то откроет порт 9000)
npx kill-port 9000    Освободить порт
npx sort-package-json Сделать package.json красивым
npx npm-check-updates --target minor -u   Управляем обновлением npm-зависимостей
npx matrix-rain       Подготовиться к выходу Matrix 4

npm list    Чтобы просмотреть версии всех установленных пакетов npm, включая их зависимости: