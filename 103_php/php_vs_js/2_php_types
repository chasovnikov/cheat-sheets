
;10 типов дынных     
;JS: 8 типов дынных 

;простые:
    bool
    int
    float (double/real)
    string
;JS: Boolean, Number, BigInt, String

;смешанные:
    array
    object
    callable
    iterable
;JS:    Object, Symbol

;специальные:
    resource
    NULL
;JS: null, undefined


;Проверка типа:
    var_dump()
    gettype()   ;JS: typeof(x)
    is_nan()    ;JS: isNaN(x) или Number.isNaN(x)
    is_int(), is_bool() и т.д.


--------- Преобразование в булев тип (bool, boolean):

Случаи преобр-я в FALSE:    
    !!null
    !!NaN
    !!0
    !!""
    !!"0"       # В JS здесь - true
    !![]        # В JS здесь - true

    !!" "       # PHP:???  JS: любые непустые строки, даже из пробелов - true!

Явное преобразование: 
    !!$bar                    ;JS: тоже
    settype($bar, "bool")     ;JS: Boolean(value)


--------- Целые числа (int):

$a = 1234;       # 10-ичное
$a = 1_234_567;  # 10-ичное (с PHP 7.4.0)
$a = 0b11111111; # 2-ичное
$a = 0123;       # 8-ричное
$a = 0o123;      # 8-ричное (начиная с PHP 8.1.0)
$a = 0x1A;       # 16-ричное

# Макс. значение для 32-битн. платформ примерно равно 2 миллиардам
# 64-битные платформы - около 9E18
# Если число превышает размер типа int, то
# оно будет интерп-ся как float
;JS: Диапазон чисел типа 'number': +-(2**53-1)

PHP_INT_SIZE    ; размер int
PHP_INT_MAX     ; макс. значение
PHP_INT_MIN     ; мин. значение
;JS: 
Number.EPSILON           # Наименьший интервал между двумя числами
Number.MAX_VALUE         # Наибольшее положительное число
Number.MIN_VALUE         # Самое близкое к нулю положительное число
Number.MAX_SAFE_INTEGER  # Максимальное безопасное целое число (2**53 - 1)
Number.MIN_SAFE_INTEGER  # Минимальное безопасное целое число (-(2**53 - 1))

# Перевод из 10-чной сис.счиления в другую:
    decbin(1234);    // обратно: bindec()
    decoct(0o123);   // обратно: octdec()
    dechex(0x1A);    // обратно: hexdec()
;JS:
    number.toString(16)
    123456..toString(16)
    (123456).toString(16)

is_finite($a)   # Проверяет, является ли значение допустимым конечным числом
is_infinite($a) # Проверяет, является ли значение бесконечным

;Явное преобразование: 
    $int2 = +'123'           ;JS: тоже
    $int = (int) '123'
    settype($bar, "bool")    ;JS: Number(value)

--------- Числа с плавающей точкой (float, double, real)

$a = 1.234;
$b = 1.2e3;
$c = 7E-10;
$d = 1_234.567; # начиная с PHP 7.4.0

Не доверяйте точности чисел с плавающей точкой до последней цифры.
Если необходима высокая точность, используйте 
математические функции произвольной точности (BC Math) и gmp-функции

Для сравнения чисел с плавающей точкой используют
самую маленькую допустимую разницу при расчётах $epsilon

$a = 1.23456789;
$b = 1.23456780;
$epsilon = 0.00001;

if (abs($a - $b) < $epsilon) {
    echo "true";
}

--------- NaN
Любое строгое или нестрогое сравнение данного значения с 
другим значением, кроме true, включая его самого, возвратит false.
Для определения её наличия необходимо использовать функцию is_nan()

--------- Строка (string) 
Строка может быть определена четырьмя различными способами:

одинарными кавычками (не обрабат-ся управ. последов-ти и переменные)
двойными кавычками   (обрабат-ся управ. последов-ти и переменные)
heredoc-синтаксисом  (многострочный аналог двойных ковычек)
nowdoc-синтаксисом   (многострочный аналог одинарных ковычек)

<?php
$juice = "apple";
echo "He drank some juice made of $juice.";   # можно так
echo "He drank some juice made of ${juice}s."; # и так

// heredoc
echo <<<END
      a
     b
    c
\n
END;  # Закрывающий идентификатор (END) не должен иметь отступ больше, 
      # чем любая строка тела (php > 7.3)
?>

--------- Числовые строки
Строка считается числовой, если её можно интерпретировать как 
целое число или как число с плавающей точкой. 
Префиксная числовая строка - это строка, которая начинается 
как числовая и продолжается любыми другими символами

--------- 


--------- 


--------- 


--------- 


--------- 


--------- 


--------- 


--------- 