------------ 2_start
Установка и настройка рабочей среды
• установка Node.js с сайта программы

Дебаг программы

Менеджер пакетов

Работа с консолью, циклы событий, асинхронность

Модули Node.js и инструменты разработки

Стримы (потоки)

Node.js HTTP-module. HTTP-stream. Встроенный низкоуровневый веб-сервер

------------ npm
• как запустить nodemon?
• 
• 
• 

3 ------------ process
• показать аргументы консольной команды
• показать архитектуру ЦП
• показать текущий рабочий каталог процесса
• изменить текущий рабочий каталог процесса
• показать использование времени ЦП
• показать переменные окружения
• показать абсолютный путь к исполняемому файлу
• принудительно завершить процесс 
• код выхода корректно завершенного процесса 
• вернуть числовой идентификатор пользователя процесса
• показать реальное время с высоким разрешением в наносекундах как bigint
• отправить сигнал другому процессу
• использование памяти процессом, измеренное в байтах
• добавляет колбэк в «очередь следующего тика»
• id текущего процесса
• PID родительского элемента текущего процесса
• возвращает строку, определяющую платформу операционной системы
• использование ресурсов для текущего процесса
• устанавливает идентификатор пользователя процесса
• заголовок текущего процесса
• устанавливает маску для создания файлового режима процесса
• возвращает количество секунд выполнения текущий процесс
• содержит строку версии Node.js
• объект, в котором перечислены строки версии Node.js и его зависимости
• 
• Что делают эти методы (следует знать (Флэнаган)):
process.argv
process.arch
process.cwd()
process.chdir()
process.cpuUsage()
process.env
process.execPath
process.exit()
process.exitCode
process.getuid()
process.hrtime.bigint()
process.kill()
process.memoryUsage()
process.nextTick()
process.pid
process.ppid
process.platform
process.resourceUsage()
process.setuid()
process.title
process.umask()
process.uptime()
process.version
process.versions

  ------------ OS
• Возвращает архитектуру ЦП операционной системы
• часто используемые константы, специфичные для операционной системы
• массив объектов, содержащий информацию о каждом логическом ядре ЦП
• Возвращает строку, определяющую порядок байтов ЦП, для которого был скомпилирован двоичный файл Node.js
• Маркер конца строки, зависящий от операционной системы
• Возвращает количество свободной системной памяти в байтах
• Возвращает приоритет планирования для процесса
• Возвращает домашний каталог текущего пользователя
• Возвращает имя хоста компьютера
• Возвращает средние показатели загрузки за 1, 5 и 15 м и н у т
• Возвращает сведения о доступных сетевых подключениях.
• Возвращает ОС: например, "linux", "darwin” или ”win32 ” 
• Возвращает номер версии ОС
• Пытается установить запланированный приоритет для процесса
• Возвращает стандартный временный каталог
• Возвращает общий объем оперативной памяти в байтах
• Возвращает ОС: например, "Linux", "Darwin" или "Windows_NT"
• Возвращает время безотказной работы системы в секундах
• Возвращает идентификатор, имя, домашний каталог и командную оболочку текущего пользователя.
• 
•  Что делают эти методы (следует знать (Флэнаган)):
os.arch()
os.constants
os.cpus()
os.endiannes()
os.EOL
os.freemem
os.getPriority()
os.homedir()
os.hostname()
os.loadavg()
os.networkInterface()
os.platform()
os.release()
os.setPriority()
os.tmpdir
os.totalmem()
os.type()
os.uptime()
os.userInfo()

4 ------------ Buffer
• создать безопасный буфер длинной 1024 байт, заполненный единицами
• создать небезопасный буфер длинной 1024 байт (без очистки)
• создать буфер из массива
• создать буфер из строки и вывести в кодировке ut8, base64, binary, hex
• созданные буферы конкатинируйте
• в буфере из строки найти символ на 2-й позиции
• проитерир-сь по буферу и выведите в консоль каждый символ

-------------- modules
• пример подключения своего модуля с сообщение в консоль
• пример с module.exports
• пример с module.parent
• как идёт поиск модуля?
• передача параметров в модуль (модуль-фабрика)
• 
• 

5 ------------ events
• создать событие "message" и вывести сообщение в консоль (генерация события)
• написать пример однократного события
• пример передачи аргументов слушателям
• переключить ф-ию слуш-ля в асинх. режим (2 способа)
• пример испол-я асинх. колбэка с правильной обработкой ошибок (captureRejections: true)
• пример 3 синхронных слушателей одного события
• пример 1-го асинхр-го и 2-х синхронных слушателей одного события
• пример удаления 1-го слушателя из 2-х
• пример удаления всех слушателей
• добавление 2-го слушателя в начало массива слушателей
• показать количество слушателей для соб. eventName
• на что ссылается this в стрелочной ф-ии-слушателя и this декларативн. ф-ии - слуш.?
• допустимое кол-во обработчиков по умолчанию. Как расширить это кол-во?
• показать массив функций обработчиков для указаного события
• обработка ошибок
• От ITVDN: Создайте класс FileStream, который наследуется от класса EventEmmiter. Реализуйте в нем методы для
чтения и записи фалов. Методы должны выводить в консоль сообщения «файл прочитан» и «файл
записан». Реализуйте возможность установки обработчиков на события чтения и записи. И при вызове
соответствующих методов генерацию этих событий.

6 ------------ path
Вывести в консоль:
• Название текущ. файла
• абсолютный путь к текущ. файлу
• Название текущ. файла без расширения
• Расширение файла
• Название текущ. папки
• Абсолютный путь к текущ. папке
• Абсолютный путь к НЕтекущ. папке
• Путь к файлу в соседней папке (абсолютный)
• Путь к файлу в соседней папке (относительный)

7 ------------ fs
--- Чтение файлов
--- Запись в файл
--- Файловые операции
--- Метаданные файлов
--- Работа с каталогами

• создать папку синхронно
• создать вложенные папки синхронно рекурсивно
• создать папку асинхронно
• создать вложенные папки асинхронно рекурсивно
• удалить папку через колбэки
• удалить папку через промисы
• записать/добавить/прочитать строку в файл синхронно
• записать/добавить/прочитать строку в файл асинхронно через колбэки
• записать/добавить/прочитать строку в файл асинхронно через промисы (своя ф-ия)
• записать/добавить/прочитать строку в файл асинхронно через промисы в кодировке utf-8
• удалить файл через колбэки
• удалить файл через промисы
• Через перемен.окруж-я передаем строку (несколько слов), записываем её в файл.
Считываем файл, считаем кол-во слов в файле и записываем их в другой файл. Первый файл удаляем

8 ------------ streams
• прочитать любой файл и вывести его текст в кодировке utf-8 по кусочкам в консоль
    + вывести надпись "начали" в момента начала чтения и "конец" - в конце чтения
    + обработка ошибок
• записать в файл 20 кусков данных
• использовать канал и поток Transform. Прочитать и записать файл в архивированном виде
• 

9 ------------ http
• создать сервер
• вывести сообщение в браузер в формате JSON
• Вывести html-файл из папки public в ответ на опред-й урл

-------------- Rest API без фреймворков
• создать пример гет-запроса
• создать пример пост-запроса (создание пользователя)
• 
• 
• 

-------------- Express
• создать пример гет-запроса
• создать пример пост-запроса (создание пользователя)
• 
• 
• 

------------ Errors
• 
• 

------------ MongoDB и Mongoos
• создать БД

------------ Свои проекты
• чат
• сайт-резюме
• поучаствовать в 2-4-х безоплатных проектах: опен-соурс
