Существуют различные способы прекращения Node.js приложение.

При запуске программы в консоли вы можете закрыть ее с помощью ctrl-C, но то, что мы хотим 
обсудить здесь, - это программный выход.

Давайте начнем с самого радикального и посмотрим, почему вам лучше его не использовать.

Модуль ядра процесса предоставляет удобный метод, позволяющий программно выйти из Node.js программа: 
process.exit().

Когда Node.js запускает эту строку, процесс немедленно принудительно завершается.

Это означает, что любой ожидающий обратного вызова, любой все еще отправляемый сетевой запрос, 
любой доступ к файловой системе или процессы записи в stdout или stderr - все это будет 
немедленно прекращено.

Если вас это устраивает, вы можете передать целое число, которое сигнализирует операционной 
системе код выхода:

process.exit(1)

По умолчанию код выхода равен 0, что означает успех. Разные коды выхода имеют разное значение, 
которое вы, возможно, захотите использовать в своей собственной системе, чтобы программа 
могла взаимодействовать с другими программами.

Вы можете прочитать больше о кодах выхода по адресу 
https://nodejs.org/api/process.html#process_exit_codes

Вы также можете задать свойство process.ExitCode:

process.exitCode = 1

и когда программа закончится, Node.js вернет этот код выхода.

Программа изящно завершит работу, когда вся обработка будет завершена.

Много раз с Node.js мы запускаем серверы, такие как этот HTTP-сервер:

const express = require('express')
const app = express()

app.get('/', (req, res) => {
  res.send('Hi!')
})

app.listen(3000, () => console.log('Server ready'))

Express - это фреймворк, который использует модуль http под капотом, app.listen() возвращает 
экземпляр http. Вы бы использовали https.createServer, если бы вам нужно было обслуживать 
свое приложение по протоколу HTTPS, так как app.listen использует только модуль http.

Эта программа никогда не закончится. Если вы вызовете process.exit(), любой ожидающий или 
выполняющийся в данный момент запрос будет прерван. Это нехорошо.

В этом случае вам необходимо отправить команде сигнал SIGTERM и обработать его с помощью 
обработчика сигналов процесса:

Примечание: процесс не требует "require", он доступен автоматически.

const express = require('express')

const app = express()

app.get('/', (req, res) => {
  res.send('Hi!')
})

const server = app.listen(3000, () => console.log('Server ready'))

process.on('SIGTERM', () => {
  server.close(() => {
    console.log('Process terminated')
  })
})

Что такое сигналы? Сигналы - это система связи POSIX: уведомление, отправленное процессу, 
чтобы уведомить его о произошедшем событии.

SIGKILL - это сигнал, который сообщает процессу о немедленном завершении, и в идеале он должен 
действовать как process.exit().

SIGTERM - это сигнал, указывающий процессу на корректное завершение. Это сигнал, который 
посылается менеджерами процессов, такими как upstart или , и многими другими.

Вы можете отправить этот сигнал изнутри программы, в другой функции:

process.kill(process.pid, 'SIGTERM')

Или от другого Node.js запущенная программа или любое другое приложение, 
запущенное в вашей системе, которое знает идентификатор процесса, который вы хотите завершить.