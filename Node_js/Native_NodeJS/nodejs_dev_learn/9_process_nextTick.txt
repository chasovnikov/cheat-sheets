
Каждый раз, когда цикл событий проходит полный цикл, мы называем это тик.

Когда мы передаем функцию process.nextTick(), мы даем команду движку вызвать эту функцию 
в конце текущей операции, до начала следующего цикла событий:

process.nextTick(() => {
  //do something
})

Цикл событий занят обработкой текущего кода функции.

Когда эта операция заканчивается, механизм JS запускает все функции, переданные вызовам 
nextTick во время этой операции.

Таким образом, мы можем указать движку JS обрабатывать функцию асинхронно 
(после текущей функции), но как можно скорее, а не ставить ее в очередь.

setTimeout(() => {}, 0) будет выполняться в конце следующего тика, 
намного позже, чем при использовании nextTick(), которая определяет приоритет вызова 
и выполняет его непосредственно перед началом следующего тика.

Используйте nextTick(), если вы хотите убедиться, что на следующей итерации цикла событий 
этот код уже выполнен.