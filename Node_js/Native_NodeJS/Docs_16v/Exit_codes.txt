Коды выхода#
Node.js обычно завершается с кодом состояния 0, когда асинхронные операции больше не ожидаются. 
В других случаях используются следующие коды состояния:

1 Неперехваченное фатальное исключение: Произошло неперехваченное исключение, и оно не 
было обработано доменом или обработчиком события 'uncaughtException'.

2: Неиспользуемый (зарезервирован Bash для неправильного использования встроенного)

3 Внутренняя ошибка синтаксического анализа JavaScript: Исходный код JavaScript, внутренний в 
Node.js процесс начальной загрузки вызвал ошибку синтаксического анализа. Это крайне редко и, 
как правило, может произойти только во время разработки Node.js сам по себе.

4 Ошибка внутренней оценки JavaScript: Исходный код JavaScript, встроенный в Node.js процесс 
начальной загрузки не смог вернуть значение функции при оценке. Это крайне редко и, как правило, 
может произойти только во время разработки Node.js сам по себе.

5 Фатальная ошибка: В версии 8 произошла фатальная неустранимая ошибка. Обычно сообщение 
печатается в stderr с префиксом ФАТАЛЬНАЯ ОШИБКА.

6 Нефункциональный внутренний обработчик исключений: Было неперехваченное исключение, но 
внутренняя функция обработчика фатальных исключений была каким-то образом настроена на 
нефункциональность и не могла быть вызвана.

7 Сбой во время выполнения внутреннего обработчика исключений: Произошло неперехваченное исключение, 
и сама функция внутреннего обработчика фатальных исключений выдала ошибку при попытке ее обработки. 
Это может произойти, например, если обработчик 'uncaughtException' или domain.on('ошибка') 
выдает ошибку.

8: Неиспользованный. В предыдущих версиях Node.js , код выхода 8 иногда указывал на неперехваченное 
исключение.

9 Недопустимый аргумент: либо была указана неизвестная опция, либо опция, требующая значения, 
была предоставлена без значения.

10 Внутренний сбой во время выполнения JavaScript: исходный код JavaScript, встроенный в 
Node.js процесс начальной загрузки выдал ошибку при вызове функции начальной загрузки. 
Это крайне редко и, как правило, может произойти только во время разработки Node.js сам по себе.

12 Недопустимый аргумент Отладки: Были установлены параметры --inspect и/или --inspect-brk, 
но выбранный номер порта был недействительным или недоступным.

13 Незавершенное ожидание верхнего уровня: ожидание использовалось вне функции в коде 
верхнего уровня, но переданное обещание так и не было выполнено.

>128 Выходов Сигнала: Если Node.js получает фатальный сигнал, такой как SIGKILL или SIGHUP, 
тогда его код выхода будет равен 128 плюс значение кода сигнала. Это стандартная практика POSIX, 
поскольку коды выхода определяются как 7-битные целые числа, а выходы сигнала устанавливают 
бит старшего порядка, а затем содержат значение кода сигнала. Например, сигнал SIGABRT имеет 
значение 6, поэтому ожидаемый код выхода будет 128 + 6 или 134.