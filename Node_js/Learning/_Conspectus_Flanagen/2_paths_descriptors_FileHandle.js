// Некоторые важные пути.
process.cwd(); // Абсолютный путь к текущему рабочему каталогу.
__filename; // Абсолютный путь к файлу, который хранит текущий код.
__dirname; // Абсолютный путь к каталогу, в котором находится __filename.
os.homedir(); // Домашний каталог пользователя.

const { fstat } = require('fs');
const path = require('path');
path.sep; // Либо либо "\" в зависимости от ОС

let р = 'src/pkg/test. js';
path.basename(р); // => "test.js"
path.extname(p); // => ".js"
path.dirname(p); // => "src/pkg"
path.basename(path.dirname(p)); // => "pkg"
path.dirname(path, dirname(p)); // => "src"

// Функция normalize() очищает пути:
path.normalize('a/b/c/../d/'); // = > "a/b/d/": обрабатывает сегменты ../
path.normalize('а/./Ь'); // => "a/b" : убирает сегменты ./
path.normalize('//a//b//'); // => "/a/b/" : удаляет дублированные /

// Функция join() объединяет сегменты пути, добавляя разделители, и нормализует их.
path.join('src', 'pkg', 't.js'); // => "src/pkg/t.js”

// Функция resolve() принимает один или большее количество сегментов
//      пути и возвращает абсолютный п у т ь . Она начинает с последнего
//      аргумента и останавливается, когда построит абсолютный путь
//      или разрешается в process.cwdO .
path.resolve(); // => process.cwd()
path.resolve('t.js'); // => path.join(process.cwd(), "t.js")
path.resolve('/tmp', 't.js'); // => "/tmp/t.js"
path.resolve('a', '/b', 't.js'); // => "/b/t.js"

// Если вы хотите работать с путями в стиле Unix в системе Windows, тогда применяйте
path.posix;
// И наоборот, если вы желаете работать с путями Windows даже в системе Unix:
path.win32;

// Некоторые функции fs, ожидают файловый дескриптор, а не имя файла.
// Файловые дескрипторы представляют собой целые числа, используемые как ссылки на “открытые” файлы
// Получить файловый дескриптор:
fs.open();
fs.openSync();

// Процессам разрешено иметь ограниченное количество одновременно открытых файлов

// FileHandle служит той же цели, что и файловый дескриптор.
//      Его нет смысла создавать, если не нужно использовать методы низкого уровня read() и write()
// И, если вы создаете объект FileHandle, то не должны забывать о close()
