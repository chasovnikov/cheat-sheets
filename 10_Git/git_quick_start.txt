
-------------- Настройка Git ------------------
git --version       - Смотреть версию гита

    Посмотреть все установленные настройки и их расположение:
git config --list --show-origin

    Задать глобально имя и электрон.почту:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

git config --global core.excludesfile ~/.gitexcludes    - исключ. для компьютера

git config --list       - Проверка настроек

-------------- HELP --------------
git help <команда>
git <команда> --help
man git-<команда>

git <команда> -h    - Посмотреть только список опций

-------------- Создание Git-репозитория -------------

    Создаёт в текущем каталоге подкаталог с именем .git
git init

    Подкаталог .git:
config
description
HEAD        - указывает на текущую ветку
hooks/      - запуск пользовательских скриптов по событиям
info/       - глоб. настройки игнор. файлов (если не нужны в .gitignore)
objects/    - база данных объектов Git
refs/       - ссылки на объекты коммитов в этой базе
index       - хранится содержимое индекса


--------------- РАБОТА С УДАЛЕННЫМ РЕПО ----------------

    Клонировать в текущий каталог
git clone https://github.com/libgit3/libgit4

    Клонир. в каталог mylibgit
git clone https://github.com/libgit3/libgit4 mylibgit

git fetch       - загрузка содержимого из указанного удаленного репо
git fetch <удаленный-репозиторий>

    Объед. ссылки и указатели удал-го содержимого в новый локальный коммит слияния
git merge 
git merge origin/<текущая-ветка>

git -rebase     - сохранить коммиты последовательно и избежать ненужных слияний

    git pull = git fetch + git merge
git pull --all           - извлечь все изменения из удаленного репо
git pull --no-commit <remote>   - без создания нового коммита
git pull --rebase <remote>      - вместо "git merge" испол-ся "git rebase"

git push --set-upstream origin main     - связать нашу ветку с удален., 
    после чего можно писать просто "git push"
git push <remote-name> <branch-name>
git push origin main     - запушить изменения на удален. репо
git push origin master -f   - принудительно записать мою локальную ветку (опасно)

    Синхронизация с main центрального репозитория, используя перебазирование:
git checkout main
git pull --rebase origin


    Создавать, просм. и удалять подключения к другим репо:
git remote      - см. репозитории
git remote -v   - см. репозитории + их url
git remote show upstream        - подробн. вывод о конфигурации удал. репо
git remote add origin <url>     - созд. нов. подключения к удал. репо
git remote rm <name>            - удаляет подключение 
git remote rename <old-name> <new-name>     - переимен. удален. подключения 

------------------ КОНТРОЛЬ СОСТОЯНИЯ ФАЙЛОВ ------------

    Определение состояния файлов:
git status
git status -s         - Сокращенный вывод статуса
git status --short -  - то же самое

    Отслеживание новых файлов:
git add README        - добавить под версионный контроль файл README
                        или индексация изменений, 
                        или для указания файлов с исправленным конфликтом слияния
git add *             - добавить всё в текущем каталоге

    Зафиксировать изменения
git commit -a                   - add + commit.
git commit -v     - перед коммитом подробное напоминание об изменениях
git commit                      - зафиксировать изменения.
git commit -m "comment here"    - набрать свой комментарий к коммиту

git mv README.md README           - переименовать файл из README.md в README
git mv README.md /src/README.md   - переместить в кат. src

git update-index --assume-unchanged <file>    
                            - временно игнорировать файл <file>
git update-index --no-assume-unchanged <file> 
                            - отключить игнорирование файла <file>

git diff              - смотреть непроиндексированные изменения
git diff --staged     - что проиндексировали и что войдёт в следующий коммит
git diff --cached     -  --staged и --cached синонимы

----------------- ИСТОРИЯ КОММИТОВ ---------------------------
git log                     - перечисляет коммиты
git log -p -2               - разницу, внесенную в каждый коммит (2 записи)
git log --stat              - сокращенная статистика
git log --pretty=oneline    - формат вывода:
    oneline                 - каждый коммит в одну строку
    short, full и fuller    - делают вывод приблизительно в том же формате
    format:"%h - %an, %ar : %s"
        %h  - Сокращенный хеш коммита
        %an - Имя автора
        %ar - Относительная дата автора
        %s  - Содержание
            - и др.        
    и др.
git log --pretty=oneline --graph    - добавится небольшой граф в формате ASCII
git log --since=2.weeks     - за последние две недели
        --author            - фильтровать по автору коммита
        --grep              - искать по ключевым словам
git log -S <string>         - там, где добавляется или удаляется эта строка
git log -- path/to/file     - те коммиты, в которых были изменения этих файлов

--------------- ОТКАТ или УДАЛЕНИЕ -----------------------------

git restore <file>           - откат непроиндексированных изменений
git restore --stage <file>   - откат проиндексированных изменений

    Удалить файл из индекса, оставив его в рабочем каталоге:
git rm               - удалить файл из индекса и каталога
git rm -f            - принудительное удаление
git rm log/\*.log    - можно передавать файлы, каталоги или шаблоны
git rm --cached <file>  - удалить файл из индекса, но не в каталоге

git checkout <хэш-сумма коммита>    - переключение на коммит по его хеш-сумме

--------------- РАБОТА С ВЕТКАМИ ------------------------

git branch -a       - см. какие есть ветки
git branch new_branch       - создает новую ветку, но не переключает на неё
git branch -d new_branch    - удалить ветку "new_branch"
git branch -D new_branch    - удал. без смердживания

git checkout new_branch  - переключение на ветку "new_branch"
git checkout -b dev      - создать ветку "dev" и перекл. на неё
git checkout <file>      - аналог "restore": откат с послед. коммиту

    Схоже с checkout, но checkout работает только с указателем HEAD, 
    а reset перемещает указатель HEAD и указатель текущей ветки
git reset    (аналогично: reset --mixed <хеш коммита>)
git reset --hard

git merge new_branch     - смерджить ветку "new_branch" с текущей

--------------- Tags ------------------
2 вида:
1) аннотированные   - полноценная ветка
2) легковесные      - указатель с именем

git tag         - см. теги
git tag v1      - создать легковесный тег "v1"
git tag -a R2020.4 -m "Realise 2020.4"   - создать аннотированный тег

    Теги отправляются на сервер только явно
git push origin v1
git push --tags         - отправить все теги
