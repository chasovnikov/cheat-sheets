"Любое действие, которое не приближает тебя к цели - непродуктивно" - Э.М.Голдратт

ООП - всё есть объекты, и каждый объект имеет свое состояние и поведение

Инкапсуляция - каждый объект только сам имеет доступ к своему состоянию
Это позволяет по отдельности брать объекты

Полиморфизм -это поддержка нескольких реализаций на основе общего интерфейса 
Дочерние классы могут изменять реализацию методов, не меняя их предназначение

GRASP:

1. Information Expert - Данные должны обрабатываться там, где они находяться

2. Creator - создавать объект нужно там, где они нужны (вызов конструктора - такой же 
метод как и др., поэтому этот шаблон тоже самое что и Information Expert)

3. Contoller - все входные системные события должны быть собраны в отдельных классах 
(многопоточный вход преобразуется в однопоточный)

4. Low Coupling (лоу коуплин) (Низкая связанность) - Минимизировать число связей между 
классами

5. High Cohesion (хай кохешн) (Высокое зацепление) - Один класс - одна обязанность 
(максимально зацеплен внутри и минимально зацеплен снаружи)

6. Polymorphism - Для связи с каждой внешней системой должен быть свой класс, реализующий 
общий интерфейс для классов подобного типа

7. Pure Fabrication (Искусственный) Чистая выдумка — это класс, не отражающий никакого 
реального объекта предметной области, но специально придуманный для усиления зацепления, 
ослабления связанности или увеличения степени повторного использования. 

8. Indirection (Индерекшен) - Перенаправление. Создание посредника для исключения прямое 
воздействие одного элемента на другой

9. Protected Variations (Защищенные изменения) Защищает элемент от влияния изменения др 
элемента с помощью вынесения взаимодействия в фиксированнный интерфейс


GoF (Банда Четырех):

1. Порождающие паттерны.

1.1. Singleton.
	Цель применения: ограничить число создаваемых объектов.
	Примеры: класс-логгер, класс подключения к БД.
	Реализация: приватный конструктор и публичный статический метод getInstance(), возвращающий ссылку на единственный экземплярю

class Preferences
{
	private static $instance ;
	private function __construct(){}

	public static function getInstance ()
		if (empty(self::$instance)) {
			self::$instance = new Preferences();
		}
	return self::$instance; 
}

1.2. Factory Method (Фабричный метод) - определяет интерфейс для создания объектов, 
но оставляет подклассам решение о том, какой класс инсталлировать.
Не использует оператор "new". Применяется, когда требуется получить разные объекты, 
но с однаковым набором методов.

1.3. Abstract Factory / Kit (Абстрактная фабрика) - предоставляет интерфейс для создания семейств взаимосвязанных или взаимозависимых объектов, не специфицируя их конкретных классов
Проблема: создать семейство взаимосвязанных объектов (не специфицируя их конкретных классов).
Решение: создать абстрактные классы для каждого из семейств, в которых объявлен интерфейс для создания конкретных классов
Преимущества: изолирует конкретные классы.
Недостатки: фиксирует набор объектов, которые можно создать

...