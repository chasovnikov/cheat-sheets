{
  "compilerOptions": {
    /* Посещение https://aka.ms/tsconfig.json чтобы узнать больше об этом файле */

    /* Проекты */
    // "incremental": true,         /* Включить инкрементную компиляцию */
    // "composite": true,           /* Включить ограничения, позволяющие использовать проект машинописи со ссылками на проекты. */
    // "tsBuildInfoFile": "./",     /* Укажите папку для файлов инкрементной компиляции .tsbuildinfo. */
    // "disableSourceOfProjectReferenceRedirect": true, /* Отключите предпочтение исходных файлов вместо файлов объявлений при ссылках на составные проекты */
    // "disableSolutionSearching": true,          /* Исключить проект из проверки ссылок на несколько проектов при редактировании. */
    // "disableReferencedProjectLoad": true,      /* Уменьшите количество проектов, автоматически загружаемых TypeScript. */

    /* Язык и окружающая среда */
    "target": "es2016" /* Установите языковую версию JavaScript для создаваемого JavaScript и включите объявления совместимых библиотек. */,
    // "lib": [],                         /* Укажите набор файлов объявления библиотеки, которые описывают целевую среду выполнения. */
    // "jsx": "preserve",                 /* Укажите, какой код JSX генерируется. */
    // "experimentalDecorators": true,    /* Включить экспериментальную поддержку для декораторов проекта 2 этапа TC39. */
    // "emitDecoratorMetadata": true,     /* Выдает метаданные типа дизайна для оформленных объявлений в исходных файлах. */
    // "jsxFactory": "",                  /* Укажите заводскую функцию JSX, используемую при таргетинге на React JSX, например, "React.createElement" или "h" */
    // "jsxFragmentFactory": "",          /* Укажите ссылку на фрагмент JSX, используемую для фрагментов при таргетинге на React JSX, например, "Реагировать.Фрагмент" или "Фрагмент". */
    // "jsxImportSource": "",             /* Укажите спецификатор модуля, используемый для импорта заводских функций JSX при использовании `jsx: react-jsx*`.` */
    // "reactNamespace": "",              /* Укажите объект, вызываемый для "createElement`. Это применимо только при таргетинге на эмиссию JSX `react`. */
    // "noLib": true,                     /* Отключить включение любых библиотечных файлов, включая библиотеку по умолчанию.d.ts. */
    // "useDefineForClassFields": true,   /* Выдает поля класса, соответствующие стандарту ECMAScript. */

    /* Modules */
    "module": "commonjs" /* Укажите, какой код модуля генерируется. */,
    // "rootDir": "./",              /* Укажите корневую папку в ваших исходных файлах. */
    // "moduleResolution": "узел",   /* Укажите, как TypeScript ищет файл из заданного спецификатора модуля. */
    // "baseUrl": "./",              /* Укажите базовый каталог для разрешения не относительных имен модулей. */
    // "paths": {},                  /* Укажите набор записей, которые повторно сопоставляют импорт с дополнительными местоположениями поиска. */
    // "rootDirs": [],               /* Разрешить обработку нескольких папок как одной при разрешении модулей. */
    // "typeRoots": [],              /* Укажите несколько папок, которые действуют как "./node_modules/@типы`. */
    // "types": [],                  /* Укажите имена пакетов типов, которые будут включены без ссылок в исходном файле. */
    // "allowUmdGlobalAccess": true, /* Разрешить доступ к глобальным данным UMD из модулей. */
    // "resolveJsonМодуль": true,    /* Включить импорт файлов .json */
    // "noResolve": true,            /* Запретить `импорт`, "требовать" или "<ссылка>` от увеличения количества файлов, которые TypeScript должен добавлять в проект. */

    /* Поддержка JavaScript */
    // "allowJs": true,           /* Разрешить файлам JavaScript быть частью вашей программы. Используйте опцию `checkJS`, чтобы получить ошибки из этих файлов. */
    // "checkJs": true,           /* Включить сообщения об ошибках в файлах JavaScript с проверкой типа. */
    // "maxNodeModuleJsDepth": 1, /* Укажите максимальную глубину папки, используемую для проверки файлов JavaScript из "node_modules". Применимо только с "allowJs". */

    /* Emit */
    // "declaration": true,           /* Создайте файлы .d.ts из файлов машинописи и JavaScript в вашем проекте. */
    // "declarationMap": true,        /* Создайте исходные карты для файлов d.ts. */
    // "emitDeclarationOnly": true,   /* Выводить только файлы d.ts, а не файлы JavaScript. */
    // "sourceMap": true,             /* Создайте файлы исходных карт для отправленных файлов JavaScript. */
    // "outFile": "./",               /* Укажите файл, который объединяет все выходные данные в один файл JavaScript. Если "объявление" true, также обозначает файл, который объединяет все выходные данные .d.ts. */
    // "outDir": "./",                /* Укажите выходную папку для всех отправленных файлов. */
    // "removeComments": true,        /* Отключить отправку комментариев. */
    // "noEmit": true,                /* Отключите передачу файлов из компиляции. */
    // "importHelpers": true,         /* Разрешить импорт вспомогательных функций из tslib один раз для каждого проекта, вместо того, чтобы включать их в файл. */
    // "importsNotUsedAsValues": "удалить", /* Укажите поведение отправки/проверки для импорта, который используется только для типов */
    // "downlevelIteration": true,    /* Выдает более совместимый, но подробный и менее производительный JavaScript для итерации. */
    // "sourceRoot": "",              /* Укажите корневой путь для отладчиков, чтобы найти исходный код ссылки. */
    // "mapRoot": "",                 /* Укажите местоположение, в котором отладчик должен размещать файлы карты вместо сгенерированных местоположений. */
    // "inlineSourceMap": true,       /* Включить файлы исходной карты в исходящий JavaScript. */
    // "inlineSources": true,         /* Включить исходный код в исходные карты внутри создаваемого JavaScript. */
    // "emitBOM": true,               /* Выдает метку порядка байтов UTF-8 (BOM) в начале выходных файлов. */
    // "newLine": "crlf",             /* Установите символ новой строки для отправки файлов. */
    // "stripInternal": true,         /* Отключите отправку объявлений, в комментариях к JSDoc которых есть "@internal". */
    // "noEmitHelpers": true,         /* Отключите создание пользовательских вспомогательных функций, таких как "__extends`, в скомпилированном выводе. */
    // "noEmitOnError": true,         /* Отключите отправку файлов, если сообщается о каких-либо ошибках проверки типов. */
    // "preserveConstEnums": true,    /* Отключите удаление объявлений 'const перечисления` в сгенерированном коде. */
    // "declarationDir": "./",        /* Укажите выходной каталог для сгенерированных файлов деклараций. */
    // "preserveValueImports": true,  /* Сохранить неиспользуемые импортированные значения в выводе JavaScript, которые в противном случае были бы удалены. */

    /* Ограничения взаимодействия */
    // "isolatedModules": true,              /* Убедитесь, что каждый файл может быть безопасно перенесен, не полагаясь на другой импорт. */
    // "allowSyntheticDefaultImports": true, /* Разрешить "импорт x из y", если модуль не имеет экспорта по умолчанию. */
    "esModuleInterop": true /* Выделяет дополнительный JavaScript для облегчения поддержки импорта модулей CommonJS. Это позволяет использовать "allowSyntheticDefaultImports" для совместимости типов. */,
    // "preserveSymlinks": true,             /* Отключите разрешение символических ссылок на их реальный путь. Это соотносится с тем же флагом в узле. */
    "forceConsistentCasingInFileNames": true /* Убедитесь, что при импорте указан правильный регистр. */,

    /* Проверка типа */
    "strict": true /* Включите все параметры строгой проверки типов. */,
    // "noImplicitAny": true,                 /* Включить отчеты об ошибках для выражений и объявлений с подразумеваемым типом "любой".. */
    // "strictNullChecks": true,              /* При проверке типов учитывайте "null" и `неопределенный`. */
    // "strictFunctionTypes": true,           /* При назначении функций убедитесь, что параметры и возвращаемые значения совместимы с подтипом. */
    // "strictBindCallApply": true,           /* Проверьте, чтобы аргументы методов "привязать`, `вызвать` и `применить` соответствовали исходной функции. */
    // "strictPropertyInitialization": true,  /* Проверьте свойства класса, которые объявлены, но не заданы в конструкторе. */
    // "noImplicitThis": true,                /* Включить сообщение об ошибках, когда `этому` присваивается тип "любой`. */
    // "useUnknownInCatchVariables": true,    /* Введите переменные предложения catch как "неизвестные" вместо "любые". */
    // "alwaysStrict": true,                  /* Убедитесь, что "использовать строго" всегда выдается. */
    // "noUnusedLocals": true,                /* Включить сообщение об ошибках, когда локальные переменные не считываются. */
    // "noUnusedParameters": true,            /* Выдает ошибку, когда параметр функции не считывается */
    // "exactOptionalPropertyTypes": true,    /* Интерпретируйте необязательные типы свойств так, как написано, вместо добавления "неопределенных". */
    // "noImplicitReturns": true,             /* Включить отчеты об ошибках для кодовых путей, которые явно не возвращаются в функции. */
    // "noFallthroughCasesInSwitch": true,    /* Включить отчеты об ошибках для случаев сбоя в операторах switch. */
    // "noUncheckedIndexedAccess": true,      /* Включить "неопределенный" в результаты подписи индекса */
    // "noImplicitOverride": true,            /* Убедитесь, что переопределяющие члены в производных классах помечены модификатором переопределения. */
    // "noPropertyAccessFromIndexSignature": true, /* Принудительно использует индексированные средства доступа для ключей, объявленных с использованием индексированного типа */
    // "allowUnusedLabels": true,             /* Отключите отчеты об ошибках для неиспользуемых меток. */
    // "allowUnreachableCode": true,          /* Отключите сообщения об ошибках для недоступного кода. */

    /* Полнота */
    // "skipDefaultLibCheck": true,   /* Пропустить проверку типов файлов .d.ts, включенных в TypeScript. */
    "skipLibCheck": true /* Пропустить проверку типов всех файлов .d.ts. */
  },

  // Исключить из компиляции:
  "exclude": ["./module.ts"],

  // Включить в компиляцию:
  // "include": ["./src/**/*"],

  // Файлы для компиляции:
  "filse": ["./app.ts"]
}
