Команда node - это та, которую мы используем для запуска нашего Node.js сценарии:

BASH 
script.js

Если мы запускаем команду node без какого-либо сценария для выполнения или без каких-либо 
аргументов, мы запускаем сеанс REPL:

BASH
node

Примечание: REPL расшифровывается как цикл чтения и печати, и это языковая среда 
программирования (в основном окно консоли), которая принимает одно выражение в качестве 
пользовательского ввода и возвращает результат обратно на консоль после выполнения. 
Сеанс REPL предоставляет удобный способ быстрого тестирования простого кода JavaScript.

Если вы попробуете это сейчас в своем терминале, вот что произойдет:

BASH
❯ node
>

Команда остается в режиме ожидания и ждет, пока мы что-нибудь введем.

Совет: если вы не уверены, как открыть свой терминал, загуглите "Как открыть терминал в 
\<вашей операционной системе>".

REPL ждет, когда мы введем некоторый код JavaScript, если быть более точным.

Начните с простого и введите

КОНСОЛИ
> console.log('test')
test
undefined
>

Первое значение, test, - это вывод, который мы указали консоли для печати, затем мы получаем 
undefined, который является возвращаемым значением при запуске console.log(). Узел прочитал 
эту строку кода, оценил ее, напечатал результат, а затем вернулся к ожиданию дополнительных 
строк кода. Узел будет выполнять эти три шага для каждого фрагмента кода, который мы выполняем 
в REPL, пока мы не выйдем из сеанса. Вот откуда REPL получил свое название.

Узел автоматически печатает результат любой строки кода JavaScript без необходимости указывать 
ему на это. Например, введите следующую строку и нажмите enter:


КОНСОЛИ
> 5 === '5'
false
>

Обратите внимание на разницу в выводах двух вышеуказанных линий. Узел REPL напечатал undefined 
после выполнения console.log(), в то время как, с другой стороны, он просто напечатал результат 
5 === '5'. Вам нужно иметь в виду, что первое - это просто утверждение в JavaScript, а второе - 
выражение.

В некоторых случаях коду, который вы хотите протестировать, может потребоваться несколько строк. 
Например, предположим, что вы хотите определить функцию, генерирующую случайное число, в сеансе 
REPL введите в следующей строке и нажмите enter:

КОНСОЛИ
function generateRandom() {
...

Узел REPL достаточно умен, чтобы определить, что вы еще не закончили писать свой код, и он 
перейдет в многострочный режим, чтобы вы могли ввести больше кода. Теперь завершите определение 
функции и нажмите enter:

КОНСОЛИ 
function generateRandom() {
...return Math.random()
}
undefined

Узел выйдет из многострочного режима и выведет значение undefined, так как значение не возвращено. 
Этот многострочный режим ограничен. Узел предлагает более полнофункциональный редактор прямо 
внутри REPL. Мы обсудим это ниже в разделе Точечные команды.

Используйте вкладку для автозаполнения
Самое классное в REPL то, что он интерактивный.

Когда вы пишете свой код, если вы нажмете клавишу tab, REPL попытается автоматически заполнить то, 
что вы написали, чтобы соответствовать переменной, которую вы уже определили, или предопределенной.

Изучение объектов JavaScript
Попробуйте ввести имя класса JavaScript, например Number, добавьте точку и нажмите tab.

REPL выведет все свойства и методы, к которым вы можете получить доступ в этом классе:

> Number.


Исследуйте глобальные объекты
Вы можете проверить глобальные переменные, к которым у вас есть доступ, набрав глобальный. 
и нажатие кнопки tab:

> global.

Специальная переменная _
Если после некоторого кода вы наберете _, то будет выведен результат последней операции.

Клавиша со стрелкой вверх
Если вы нажмете клавишу со стрелкой вверх, вы получите доступ к истории предыдущих строк кода, 
выполненных в текущем и даже предыдущих сеансах REPL.

Точечные команды
В REPL есть несколько специальных команд, все они начинаются с точки.. Они являются

.help: показывает справку по командам с точками

.editor: включает режим редактора, позволяющий легко писать многострочный код JavaScript. 
Как только вы перейдете в этот режим, введите ctrl-D, чтобы запустить написанный вами код.

.break: при вводе многострочного выражения ввод команды .break приведет к прерыванию дальнейшего 
ввода. То же, что и нажатие ctrl-C.

.clear: сбрасывает контекст REPL на пустой объект и очищает любое многострочное выражение, 
вводимое в данный момент.

.load: загружает файл JavaScript относительно текущего рабочего каталога

.save: сохраняет все, что вы ввели в сеансе REPL, в файл (укажите имя файла).

.exit: выход из repl (аналогично нажатию ctrl-C два раза)
REPL знает, когда вы вводите многострочный оператор без необходимости вызывать .editor.

Например, если вы начнете вводить итерацию, подобную этой:

[1, 2, 3].forEach(число => {

и вы нажмете enter, РЕПЛ перейдет к новой строке, которая начинается с 3 точек, указывая, 
что теперь вы можете продолжить работу над этим блоком.

... console.log(num)
... })

Если вы введете .break в конце строки, многострочный режим остановится, и оператор не будет выполнен.