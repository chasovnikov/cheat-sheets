HTTP (HyperText Transfer Protocol) — «протокол передачи гипертекста»
Работает по технологии «клиент-сервер», то есть "потребитель-поставщик" 
Клиент  - инициирует соединение и посылает запрос
Сервер  - ожидает соединение и возращает сообщение с результатом

Обмен сообщениями идёт по обыкновенной схеме «запрос-ответ».
использует глобальные URI
не сохраняет своего состояния

HTTP-сообщение состоит из трёх частей:
1. Стартовая строка — определяет тип сообщения;
2. Заголовки        — параметры передачи и прочие сведения;
3. Тело сообщения   — данные сообщения. Отделяется от заголовков пустой строкой. Необязательно.

Версия 0.9 протокола: запрос содержит только стартовую строку, ответ — только тело сообщения. 
Для версии протокола 1.1 сообщение запроса обязательно должно содержать заголовок Host.

--------- Стартовая строка (строка запроса):
GET URI                 — для версии протокола 0.9;
Метод URI HTTP/Версия   — для остальных версий.

Стартовая строка запроса:   GET /wiki/HTTP HTTP/1.0
Стартовая строка ответа:    HTTP/1.0 200 OK

Методы:
• OPTIONS
OPTIONS * HTTP/1.1  (проверка сервера или тест на поддержку протокола HTTP 1.1.)

• GET
Используется для запроса содержимого указанного ресурса.
GET /path/resource?param1=value1&param2=value2 HTTP/1.1
Условный GET    — содержит заголовки If-Modified-Since, If-Match, If-Range и подобные.
    Позволяет не передавать по сети избыточную информацию.
Частичный GET   — содержит в запросе Range (позволяет запросить только указанный фрагмент)

• HEAD
Аналогичен GET, но в ответе сервера отсутствует тело. 
Применяется для извлечения метаданных, проверки наличия/изменения ресурса.

• POST
Применяется для передачи пользовательских данных заданному ресурсу.
В отличие от метода GET, метод POST не считается идемпотентным, то есть 
многократное повторение одних и тех же запросов может возвращать разные результаты.
POST предполагает, что по указанному URI будет производиться обработка передаваемого содержимого

• PUT
Применяется для загрузки содержимого запроса на указанный ресурс.
В отличие от POST, PUT предполагает , что загружаемое содержимое не требует обработки

• PATCH
Аналогично PUT, но применяется только к фрагменту ресурса.

• DELETE
Удаляет указанный ресурс.

• TRACE
Клиент может увидеть, какую информацию промежуточные серверы добавляют или изменяют в запросе.

• CONNECT
Преобразует соединение запроса в прозрачный TCP/IP-туннель, 
обычно для установления защищённого SSL-соединения через нешифрованный прокси

----------- Коды состояния:
• 1xx - Информационные: 
Через протокол 1.0 сообщения с такими кодами должны игнорироваться.
100 Continue            - можно продолжать пересылать заголовки
101 Switching Protocols - переключает протоколы
102 Processing          - длительная обработка запроса
103 Early Hints

• 2хх - Success (Успех)
200 OK              — успешный запрос
201 Created         — создан новый ресурс
202 Accepted        — запрос принят на обработку, но она не завершена
203 Non-Authoritative Information - аналогично 200, но информация была взята не из первичного источника
204 No Content      - ответ без тела сообщения
205 Reset Content   - сбросьте введённые данные
206 Partial Content - выполнил частичный GET-запрос, возвратив только часть сообщения
207 Multi-Status    - результаты выполнения сразу нескольких независимых операций
208 Already Reported - уже были перечислены в предыдущей части (multistatus) ответа
и др.

• 3хх - Redirection (Перенаправление)
300 Multiple Choices - есть список альтернатив перенаправления
301 Moved Permanently - окончательно перенесен на новый URI, указанный в Location
302 Found, 302 Moved Temporarily — временно доступен по другому URI, указанному в Location
303 See Other — запросите по адресу в Location с использованием метода GET

• 4xx - Client Error (Ошибка клиента)
• 5хх - Server Error (Ошибка сервера)

--------------- Заголовки
это строки параметр : значение
несколько заголовков отделяются друг от друга переводом строки
2 перевода строки (то есть пустая строка) - конец заголовков

Content-Type: text/plain; charset=windows-1251
Content-Language: ru

Разделяются на четыре основных группы:
• General Headers («Основные заголовки») — могут включаться в любое сообщение клиента и сервера;
• Request Headers («Заголовки запроса») — используются только в запросах клиента;
• Response Headers («Заголовки ответа») — только для ответов от сервера;
• Entity Headers («Заголовки сущности») — сопровождают каждую сущность сообщения.

Можно вводить свои заголовки. К именам таких заголовков добавляют префикс «X-», но не всегда

----------------- Тело сообщения (message-body)
Если оно присутствует, используется для передачи тела объекта.
Тело сообщения отличается от тела объекта (entity-body), 
когда применяется кодирование передачи (заголовок Transfer-Encoding)
Если тело сообщения присутствует, то добавл. заголовок Content-Length или Transfer-Encoding.
Content-Length позволяет определить конец тела ответа.
Никакие ответы с кодами состояния 1xx, 204 (Нет содержимого, No Content), 
и 304 (Не модифицирован, Not Modified) не должны содержать тела сообщения. 
Все другие ответы содержат тело сообщения, даже если оно имеет нулевую длину.

----------------- HTTP 1.1 
расширяет возможности предыдущей версии и добавляет виртуальные хосты.
понятие домена (доменного имени) при использовании HTTP 1.0 не важно.
Кроме request line (старт. строки) стал обязательным ещё и заголовок, который называется host

HEAD / HTTP/1.1
host: hexlet.io