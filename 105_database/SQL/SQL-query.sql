 https://sql-language.ru/update.html


Исправление ошибок в консоли:
\c ставишь. Жмешь энтэр. Запрос с окончанием \c не выполняется. Затем стрелку вверх, предыдущий запрос, и правишь опечатку.

  Запуск через cmd:
cd C:\WebServers\usr\local\mysql-5.1\bin
mysql -u root -p 
"pASsword"


00. Создать БД с именем "wet" с кодировкой utf8:

    CREATE DATABASE wet DEFAULT CHARACTER SET utf8; 

00. Показать все БД:

    SHOW DATABASES;   

00. Подключиться к БД:     

     USE bd1;         

00. Показать все таблицы в БД:

    SHOW TABLEs;    
---------------------
заканчивает («подтверждает») текущую транзакцию и делает постоянными (сохраняет в базе данных) изменения,
 осуществленные этой транзакцией. Также стирает точки сохранения этой транзакции и освобождает ее блокировки. Можно также использовать
 эту команду для того, чтобы вручную подтвердить сомнительную распределенную транзакцию.
    COMMIT
-------------

выполняет откат транзакции, т.е. отменяет все изменения, сделанные в текущей транзакции.

    ROLLBACK 
----------
Определяет профиль пользователя, определяющий ограничения на использование ресурсов базы данных. По умолчанию пользо­вателю назначается профиль DEFAULT
PROFILE
-------------
Позволяет пользователю использовать область (области) дан­ных, а также указать (необязательно) размер
 используемого про­странства в байтах, килобайтах(К) или мегабайтах(М). Возможно указание различного значения QUOTА для нескольких областей данных.
  Ключевое слово UNLIMITED
 используется при предос­тавлении неограниченного права на использование областей дан­ных.
QUOTA
--------------
Устанавливает имя области данных, в которой по умолчанию бу­дут создаваться объекты пользователя. Если имя области
 данных не указано, то объекты пользователя по умолчанию создаются в области данных SYSTEM
DEFAULT TABLESPACE
--------------------
Устанавливает имя областиданных для временных сегментов пользователя.
 Если имя области данных не указано, то времен­ные сегменты создаются в области данных SYSTEM.
TEMPORARY TABLESPACE
------------
Созданный пользователь обладает следующими характеристиками:
Имя – st
Пароль – st
Область данных – users
Размер области данных — 150 килобайт
Область временных данных – temp
Размер области временных данных  — неограниченное использование

    CREATE USER st
    DEFAULT TABLESPACE users
    TEMPORARY TABLESPACE temp
    QUOTA 150K ON users
    QUOTA UNLIMITED ON temp;
---------------------                                

00. Создание таблицы "invoice" с внешними ключами "usr_id", "prod_id" к таблицам "usr", "product":

  CREATE TABLE invoice (
    inv_id  INT AUTO_INCREMENT NOT NULL,
    usr_id  INT NOT NULL,
    prod_id  INT NOT NULL,
    quantity INT NOT NULL UNIQUE,   --уникальные данные в поле
    PRIMARY KEY(inv_id),
    FOREIGN KEY (usr_id) REFERENCES usr(usr_id)  --назначаем внешний ключ для таблицы usr
        ON UPDATE CASCADE    --каскадная зависимость: изменение данных в родит.таблице приведет к изменению данных в табл.-потомках
        ON DELETE RESTRICT,  --удаление в связанных полях запрещено
    FOREIGN KEY (prod_id) REFERENCES product(prod_id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT,
  ) ENGINE=InnoDB CHARACTER SET=UTF8;  --ENGINE - движок

00. Создать таблицу "invoice", если такая не существует (проверка)

 CREATE TABLE IF NOT EXISTS invoice (...)  --Создать таблицу "", если такой ещё не существует

00. Добавить/Удалить столбцы

    ALTER TABLE materials							# изменить структуру таблицы materials
        ADD COLUMN capacity FLOAT NOT NULL,         # добавить столбец capacity
        ADD COLUMN conductivity FLOAT NOT NULL;	    # добавить столбец conductivity

    ALTER TABLE materials DROP COLUMN column_b ;  --Удалить столбец "column_b"

00. Вставить данные

    INSERT INTO имя_табл VALUES (знач, ...);		--вставить значения в поля(кол-во значений соответствует кол-ву столцбов)

    INSERT INTO имя_табл 
		(n1, n2, n3, id) VALUES			    	--вставить знач в конкретные столбцы
	    (12, 45, NULL, 5);

    INSERT INTO имя_табл [(имя_столбца, ...)] SELECT ...  --по результатам запроса
------------
Добавить в таблицу "" значения ("метка", "значение")

    insert into test values('N','Rob');

00. Удаление строк:

    DELETE FROM имя_табл [WHERE сложн_условие]

00. Удалить таблицу

    DROP TABLE имя_табл, 							# удалить таблицу

00. Изменить в таблице "elements" "столбец_2" на 30, где id = 22

    UPDATE elements SET столбец_2 = 30 WHERE id = 22; 

00. Выбрать первые 3 записи таблицы, где "id"=2 и "id"=4

    SELECT * FROM name_tabl WHERE id=2 OR id=4 LIMIT 3;  

00. Выбрать записи таблицы"" без дубликатов и сортировать по убыванию:

    SELECT DISTINCT *            --DISTINCT - не показывать дубликаты. ALL - показывать (по умолчанию). 
    FROM имя_табл       		    	--син_табл - необязательный синоним имени таблицы
    ORDER BY полн_имя_столбца или ном_столбца DESC    --ASC - по возрастанию, DESC - по убыванию

-----------------
# Необходимо найти отделы, в которых работает больше 2 сотрудников:

    SELECT COUNT(*), 		--COUNT - вернет количество
    (SELECT dept_name FROM departments WHERE id=employees_id)
    FROM employees
    GROUP BY employees_id
    HAVING COUNT(*)>2;

# Посчитать сколько человек работает в каждом отделе:

    SELECT COUNT(*),
    dept_id AS [Номер департамента]
    FROM employees
    GROUP BY dept_id;

-------------------------------

00. Условие WHERE.

# OR - или. 
# IN (34,45) - в промежутке (34,45). 
# AND - и:
SELECT * FROM имя_таблицы WHERE стобец_1=3 OR столбец_2 IN (34,45) AND столбец_2>3; 

# NOT - ...

# BETWEEN - между (не работает???):
SELECT * FROM имя_таблицы WHERE столбец_2 BETWEEN 34 AND 45;  

# LIKE - поиск по заданной маске (найти все записи начанающиеся на "Сид"):
SELECT * FROM имя_таблицы WHERE столбец_2 LIKE 'Сид%';  
	# '%идо%' - слово с "идо" внутри
	# '%идоров' - кончается на "идоров"
	# 'ro_' - слово из 3-х символов и начинается на "ro"
	# '_im' - слово из 3-х и кончается на "im"
	# '%ed_' - любое кол-во символов, но предпослдних два "ed"

--------------------------------
00. Математические выражения:

SUM(x)			--сумма значений столбца x результирующей таблицы
MAX(x)			--наибольшее значение из всех значений ячеек столбца x 
MIN(x)			--наименьшее значение из всех значений ячеек столбца x
AVG(x)			--среднее значение для всех значений ячеек столбца x
COUNT(x)		--общее количество ячеек в столбце x
ABS(x)			--абсолютное значение x
SQRT(x)			--квадратный корень от x
--------------------------------

/*Пусть необходимо определить наибольшее значение разности элементов */
SELECT id, n1, n2, n3, MAX(ABS(n1-n2),ABS(n1-n3),ABS(n2-n3)) FROM elements;

-----------------------------

--Показать столбец "type" и кол-во элементов в каждой строки столба "type" и сортировать по данному столбцу:
SELECT type, COUNT(*) FROM loadings GROUP BY type;

--------------------------
00. Строковые функции:

LEFT(s,n)	 	    --первые n символов строки s
RIGHT(s.n)	  		--последние n символов строки s
SUBSTRING(s, m, n)	--строка, получаемая копированием n символов из строки s, начиная с m-ого символа строки s 
LCASE(s)			--строка, полученная из s преобразованием всех букв в строчные
UCASE(s)			--строка, полученная из s преобразованием всех букв в прописные
CONCAT(s1, s2, ...)	--строка, полученная конкатенацией (слиянием) строк s1, s2, ...
LENGTH(s)			--длина строки s
-----------------------------------
00. Операторы и функции, возвращающие логическое значение (1 - ?истина?, 0 - ?ложь?):

NOT/	     		--1, если /=0.  0, если /=1
/1 AND /2			--результат логической операции ???? над /1 и /2
/1 OR /2			--результат логической операции ???Л??? над /1 и /2
BETWEEN (x, y z)	--результат выполнения логического выражения (x?=y AND x?=z)
ISNULL (v)			--1, если v имеет значение ?пусто? (NULL).  0, в противном случае
IFNULL (v1, v2)		--v1, если v1 не ?пусто?. v2, в противном случае
s LIKE образец		--1, при удачном сопоставлении строки s с образец. 0, в противном случае
s NOT LIKE образец	--0, при удачном сопоставлении строки s с образец. 1, в противном случае

/* Примечание. x, y, z - числа или выражения, имеющие числовой результат. 
l, l1, l2 - логические константы (1 или 0) или логические выражения.
s - строка или выражение, имеющее результат в виде строки. v, v1, v2 - переменные или выражения. 
образец - константа в виде строки символов, возможно, содержащая метасимволы ?%? и ?_?. 
В образец метасимвол ?_? сопоставим с любым одиночным символом строки s, метасимвол ?%? - с любой
 цепочкой символов любой ( в том числе нулевой) длины. */

----------------------------------

/*Необходимо при выводе информации из таблицы materials идентифицировать материалы,
 имеющие в своем составе алюминий (правильнее, имеющие в своем названии упоминание об алюминии*/

    SELECT name, name LIKE '%alu%', density FROM materials;  
    вернет 3 столбца,
     один из которых "name LIKE '%alu%'"(не было в БД) покажет соответствие 1 или 0.

--------------------------

00. ESCAPE - назначает управляющий символ изолирующий в даннном примере групповой символ "_".
--Вернуть зачения "column_3". которые начинаются на C_OO и имеют 5 символов.

    SELECT столбец_2 FROM табл WHERE column_3 LIKE 'C\_00_' ESCAPE "\";
--------------------------

00. OFFSET - смещение
--вернуть первые 3 записи после 6-й

    SELECT * FROM product WHERE status=1 ORDER BY id LIMIT 3 OFFSET 6;

-------------------
--------------ИЗВЛЕЧЕНИ ЗАПИСЕЙ------
-----------------
Выборка всех столцбов где deptno = 10

    1 SELECT *
    2 FROM emp
    3 WHERE deptno = 10
--
--------
Выбрать все записи таблицы "", где ""=10 или "" не равно нулю, или "" <=200 и ""=20

    1 SELECT *
    2 FROM emp
    3 WHERE deptno = 10
    4 OR comm IS NOT NULL
    5 OR sal <= 2000 AND deptno=20
------------
изменить имена в результатах запроса, используйте ключевое
слово AS

    1 SELECT sal AS salary, comm AS commission
    2 FROM emp
-----
Выбрать общую сумму записей поля "Price" для каждой записи "Customer"
таблицы "Orders" и сгруппировать по "Customer"

    SELECT Customer,SUM(Price) FROM Orders GROUP BY Customer
------------
Вернуть для каждой записи "Customer" сумму записей всего столбы "Price" таблицы "Orders"

    SELECT Customer,SUM(Price) FROM Orders
-----------
сколько денег принес каждый отдельно взятый покупатель в общей сложнос-
ти за всё время существования магазина.
    SELECT customer_name, SUM(order_price) FROM orders
    GROUP BY customer_name;
    ---------
    SELECT COUNT(brand) FROM buses WHERE seats=45
--------
Выбрать только те автобусы, цена которых лежит в пределах от 100000
до 180000 долларов включительно.

    SELECT * FROM buses WHERE price BETWEEN 100000 AND 180000
-----------1
 показывает только тех, кто купил товаров в
общей сложности минимум на 10 тысяч евро.

    SELECT customer_name, SUM(order_price) FROM orders
    GROUP BY customer_name HAVING SUM(order_price) >= 10000;
---------
Мы не помним как точно пишется “Mercedes“ или “Mersedes“, но нужно из
таблицы выбрать автобусы именно этой марки.

    SELECT * FROM buses WHERE brand LIKE “Mer_edes”
------------
С помощью конструкции IN вывести производителей из Украины, Герма-
нии и США.

    SELECT * FROM manufacturer WHERE country IN
(“Украина”, “Германия”, “США”)
---------
EXPLAIN в точности рассказывает, что происходит, когда мы выполняем запрос.

    EXPLAIN SELECT * FROM users WHERE id=’42’
--------
Чтобы обратиться к столбцу по псевдониму, необходимо использовать
вложенный запрос. Выбрать все записи таблиц под псевдонимами "","", где ""<5000.

    1 SELECT * FROM (
    3 SELECT sal AS salary, comm AS commission
    4 FROM emp) x
    6 WHERE salary < 5000
--------------
Требуется извлечь значения нескольких столбцов в один столбец с помощью CONCAT и дописать фразу " работает в качестве".
1 SELECT CONCAT(ename, ' работает в качестве ',job) AS msg
2 FROM
3 WHERE deptno=10
--------------
Выбрать столбцы "","" из таблицы "emp" и плюс показать столбец "status" со значениями: "низкооплачиваемый",
 если sal <= 2000 и 'высокооплачиваемый', если sal >= 4000, иначе вернуть "ОК" 
SELECT ename,sal,
CASE WHEN sal <= 2000 THEN 'низкооплачиваемый'
WHEN sal >= 4000 THEN 'высокооплачиваемый' 
ELSE 'OK'
END AS status
FROM emp
--------------
Требуется возвратить 5 записей таблицы, выбранных
случайным образом
SELECT ename,job
FROM emp
ORDER BY RAND() LIMIT 5
------------
Требуется найти все строки, имеющие в заданном столбце NULL (неопределенное) значение.
SELECT *
FROM emp
WHERE comm IS NULL
-------------
Чтобы подставить не!NULL значение вместо NULL, используйте функ!
цию COALESCE:
SELECT COALESCE(comm,0)
FROM emp
------------
Поиск по шаблону служащих отделов 10 и 20 требуется выбрать только тех, в имени
которых встречается буква «I» или чье название должности заканчи!
вается на «ER»:
SELECT ename, job
FROM emp
WHERE deptno in (10,20)
AND (ename like '%I%' or job like '%ER');


00. Вернуть записи таблицы "", где поле "" начинается с "val":

    SELECT * FROM tabl1 WHERE field1 LIKE 'val%';


00. ВЫБОРКА ИЗ НЕСКОЛЬКИХ ТАБЛИЦ. Выбрать записи таблицы "tabl1", где поле "field1"
 таблицы"tabl1" равно полю "field2" таблицы "table2" и поставить их СЛЕВА от 
 записей таблицы "table2":

    SELECT * FROM tabl1 LEFT JOIN table2 ON (tabl1.field1 = table2.field2);

00000. СОРТИРОВКА РЕЗУЛЬТАТОВ ЗАПРОСА
-----------------
Возвращение результатов запроса
в заданном порядке. Требуется представить имена, должности и заработные платы служа!
щих 10!го отдела и упорядочить их соответственно заработным платам
(от наименьшей к наибольшей).
Выбрать записи столбцов "","","" из табл "", где где ""=10 и сортировать по столбцу "sal" по умолчанию (по возрастанию)
    1 SELECT ename,job,sal
    2 FROM emp
    3 WHERE deptno = 10
    4 ORDER BY sal
    ------------------
Выбрать записи столбцов "","","" из табл "", где ""=10 и сортировать по 3-ему столбцу в обратном порядке
    SELECT ename,job,sal
     FROM emp
     WHERE deptno = 10
     ORDER BY 3 DESC
 ---------

Выбрать столбцы "","" из таблицы "emp" и сортировать с помощью функции SUBSTRING() по последним двум символам поля "job"
SELECT ename,job
 FROM emp
 ORDER BY SUBSTRING(job,LENGTH(job)-2)
 -------------
Создать представление (таблицу "V") для записей столбцов "ename","deptno" и вернуть ввиде столбца "data",
 разделяя имена столбцов пробелом ' '
CREATE VIEW V
AS
SELECT ename||' '||deptno AS data
 FROM emp
SELECT * FROM V
----------
Выбрать записи столбцов "","","", когда столбец "" не известен, тогда присвоить ему значение 0
 (иначе 1) и расположить в конец столбца "is_null". Сначала сортируются с 1, а потом в конце с 0.
  ОПРЕДЕЛЕННЫЕ ЗНАЧЕНИЯ COMM СОРТИРУЮТСЯ ПО ВОЗВРАСТАНИЮ, ПОСЛЕ НИХ
РАСПОЛАГАЮТСЯ ВСЕ СТРОКИ С НЕОПРЕДЕЛЕННЫМИ ЗНАЧЕНИЯМИ
SELECT ename,sal,comm
FROM (
SELECT ename,sal,comm,
 case when comm is null then 0 else 1 end as is_null
 FROM emp
 ) x
 ORDER BY is_null desc,comm
 -----------------------
Выбрать записи столбцов "","",""из таблицы "" и сортировать, когда столбец "job"='SALESMAN' по столбцу "comm", а иначе - по "sal".
SELECT ename,sal,job,comm
FROM emp
ORDER BY case when job = 'SALESMAN' then comm else sal end

00000. РЕДАКТИРОВАНИЕ ТАБЛИЦ.

00. Переименовать поле и сменить тип

    ALTER TABLE tabl1 CHANGE COLUMN old_field
new_field BOOLEAN NOT NULL DEFAULT TRUE;

00. Переименовать таблицу

    ALTER TABLE tabl1 RENAME TO new_table_name;

----------------
-----------------
-----------------

Выбрать записили поля "ename" в виде "ename_2"
 и записи "deptno", где "deptno"=10. Объединить их и запись
 "---"(с пустым значение во втором столбце напротив данного разделителя записей)

SELECT ename as ename_2, deptno
FROM emp
WHERE deptno = 10
UNION ALL
SELECT '----------', null
FROM t1
UNION ALL
SELECT dname, deptno
FROM dept
-------------------
Объедините таблицу EMP с таблицей DEPT по столбцу DEPTNO:
SELECT e.ename, d.loc
FROM emp e, dept d
WHERE e.deptno = d.deptno
and e.deptno = 10
-------------
Используйте подзапрос, возвращающий все значения столбца DEPT!
NO таблицы EMP. Внешний запрос будет искать в таблице DEPT стро!
ки, которых нет среди строк, возвращенных подзапросом:
SELECT deptno
FROM dept
WHERE deptno not in (SELECT deptno FROM emp)
-----------------
Получить значения миним и мак знач "sal"(где мин <1000))и указа их "deptno" в табл "emp", где job = ‘CLERK’
и группировать по "deptno"
SELECT deptno, MIN(sal), MAX(sal)
 FROM emp WHERE job = ‘CLERK’ GROUP BY deptno HAVING MIN(sal) < 1000;
 ------------------
Добавление столбца в таблицу(с кол-вом символов не более 10):
 ALTER TABLE t1(pole1 char(10));
 ------------
 Изменение размера столбца таблицы:
 ALTER TABLE t1 MODIFY (pole1 char(20));
 ------------
 Удаление столбца таблицы:
 ALTER TABLE t1 DROP COLUMN pole1;
 ---------------
 С помощью команды ALTER TABLE можно изменить имя 
 таблицы без реального переноса физической информации в БД:
 ALTER TABLE t1 RENAME TO t2;
 --------------
 Запрещение ограничений:
 ALTER TABLE t1 DISABLE PRIMARY KEY;
ALTER TABLE t1 DISABLE UNIQUE (p_name);
-----------------
Для удаления первичного ключа при наличии зависящих от него внешних ключей
 в команде ALTER TABLE DISABLE <ограничения> обязательна конструкция CASCADE:
ALTER TABLE t2 DISABLE PRIMARY KEY CASCADE;
---------------
Запрещенное ограничение разрешается следующим образом:
ALTER TABLE t1 ENABLE PRIMARY KEY;

ALTER TABLE t1 ENABLE UNIQUE (p_name);
----------
 удалить ограничение:
ALTER TABLE t1 DROP UNIQUE (p_name);
--------------
Нижеприведенная команда копирует данные сотрудников фирмы, 
комисионные которых превышают 25% от дохода в таблицу bonus:
INSERT INTO bonus SELECT ename, job, sal, comm FROM emp WHERE comm > 0.25 * sal;
--------------
Команду INSERT можно применить для того, чтобы извлечь значения
 из одной таблицы и разместить их в другой, воспользовавшись для этого запросом
INSERT INTO Londonstaff SELECT * FROM Salespeople WHERE city = ‘London’;
-----------------
Вставка несколько строк в таблицу table_name.
INSERT INTO table_name (tbl_id, chislo, chislotwo, name)
                   VALUES (‘1′,  ’159′,      ’34’,’name1′),
                          (‘2′,   ’14’,      ’61’,’name2′),
                          (‘3′,  ’356′,       ’8′,’name3’);
    -----------------
Удаляет из таблицы всех продавцов, у которых комиссионные меньше 100 у.е. в месяц:
DELETE FROM emp WHERE JOB = ‘SALESMAN’ AND COMM < 100;
----------
Предыдущий пример можно записать по-другому:
DELETE FROM (select * from emp) WHERE job = ‘SALESMAN’ AND comm < 100;
-------------
Для удаления всех записей в MySQL
DELETE * FROM table_nam;
---------------
Изменение для всех покупателей рейтинга на значение, равное 200:
UPDATE Customers SET rating = 200;
-------------
Для выполнения указанной замены значений столбца rating, для всех покупателей,
 которые обслуживаются продавцом Giovanni (snum = 1003), следует ввести:
 UPDATE Customers SET rating = 200 WHERE snum = 1001;
------------------------
В предложении SET можно указать любое количество значений для столбцов, разделенных запятыми:
UPDATE emp SET job = ‘MANAGER’, sal = sal + 1000, deptno = 20 WHERE ename = ‘JONES’;
----------------
нужно установить все рейтинги покупателей из Лондона (city = ‘London’) равными NULL-значению, необходимо ввести:
UPDATE Customers SET rating = NULL WHERE city = ‘London’;
---------------
Модифицирует только тех служащих, кто работают в Dallas или Detroit
Устанавливает значение колонки deptno для служащих из Бостона
Устанавливает жалованье каждого служащего в 1.1 раз больше среднего жалованья всего отдела
Устанавливает комиссионные каждого служащего в 1.5 раза больше  средних комиссионных всего отдела
UPDATE emp a SET deptno =
(SELECT deptno FROM dept WHERE loc = ‘BOSTON’), (sal, comm) = 
(SELECT 1.1*AVG(sal), 1.5*AVG(comm) FROM emp b WHERE a.deptno = b.deptno)
 WHERE deptno IN (SELECT deptno FROM dept WHERE loc = ‘DALLAS’ OR loc = ‘DETROIT’);
 -----------
 Предположим, пользователь Р1 является владельцем таблицы Student и нужно
  передать пользователю Р2 право на формулирование запросов к этой таблице:
 GRANT SELECT ON Student TO P2;
 -------------
 Для передачи прав на другие привилегии синтаксис тот же самый. Пользователь Р1, 
 являющийся владельцем таблицы Student, может разрешить пользователю Р2 вводить строки в нее:
 GRANT INSERT ON Student TO P2;
 ----------------
 Передача привилегий не ограничивается передачей единственной привилегии единственному 
 пользователю с помощью одной команды GRANT.
  Допустимы списки привилегий и/или пользователей с элементами, разделенными запятыми:
 GRANT SELECT, INSERT ON Student TO P2, Р3;
 -------------
 Можно разрешить пользователю изменять значения любого или всех столбцов таблицы:
 GRANT UPDATE ON Student TO P2;

GRANT UPDATE (Fam,Ball) ON Student TO P2;
---------------
Если необходимо предоставить кому-то все полномочия на конкретный объект, 
используется ключевое слово ALL:
GRANT ALL ON Student ТО Р2;
-----------------
Когда передаются привилегии с атрибутом PUBLIC,
 который относится  к пользователям, а не к привилегиям,
  то все пользователи получают их автоматически.
   Чаще всего это применяется для привилегии SELECT
    для определенных таблиц или представлений, которые нужно 
    предоставить каждому пользователю для рассмотрения. 
Разрешить каждому пользователю просматривать таблицу Student можно следующей командой:
GRANT SELECT ON Student TO PUBLIC;
----------------
Иногда создатель таблицы хочет, чтобы другие пользователи имели 
право передавать привилегии на эту таблицу. Это можно сделать с
 помощью предложения WITH GRANT OPTION. Если пользователь Р1 желает,
  чтобы пользователь Р2 имел право передавать полномочия на работу с таблицей Student
 другим пользователям, то он должен передать пользователю Р2 привилегию
  на выполнение соответствующих команд:
GRANT SELECT, INSERT ON Student ТО Р2 WITH GRANT OPTION;
---------
Удаление таблицы с ограничениями целостности:
DROP TABLE table CASCADE CONSTRAINTS;
--------------
В случае, если необходимо установить проверку на существование
 таблицы при удалении (если существует удалить таблицу) запрос принимает следующий вид:
DROP TABLE IF EXISTS table
--------------
Для удаления индексов (INDEX) используется запрос:
Индекс, применяемый для первичного ключа, удалить нельзя.
DROP INDEX my_index ON table;
---------------
даляет базу данных database.
DROP DATABASE database;
-------------
Запрос TRUNCATE TABLE используется для того, 
чтобы удалить данные внутри таблицы, тем самым не затрагивая саму таблицу
TRUNCATE TABLE table;
-----------------
DROP SEQUENCE используется для удаления последовательности.
DROP SEQUENCE sequence_name;
------------
DROP SYNONYM используется для удаления синонимов.
DROP SYNONYM synonym_name;
------------
DROP PUBLIC SYNONYM synonym_name;
--------------
 Синонимы позволяют обращаться к объекту базы данных или по другому имени, или без обязательной
  ссылки на владельца объекта. Однако синоним не изменяет харак­теристики описания таблицы.
CREATE SYNONYM student FOR stud.student;


create database bd1;
use bd1;
create table (
    id not null ,
    red varchar(20));

