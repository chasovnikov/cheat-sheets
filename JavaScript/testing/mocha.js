
/*
JavaScript-библиотеки для тестов:

Mocha   – основной фреймворк. Он предоставляет общие функции тестирования, 
    такие как describe и it, а также функцию запуска тестов.
Chai    – библиотека, предоставляющая множество функций проверки утверждений.
Sinon   – библиотека, позволяющая наблюдать за функциями, эмулировать встроенные функции 
    и многое другое.

Существуют более высокоуровневые фреймворки для тестирования, такие как karma и другие. 
    С их помощью легко сделать автозапуск множества тестов.
*/


// Пример. Начальная спецификация
describe("pow", function() {

    it("возводит в степень n", function() {
      assert.equal(pow(2, 3), 8);
    // assert.equal(pow(3, 3), 27); // если 1-й assert с ошибкой, результат 2-го мы не узнаем.
    });

    it("3 в степени 3 будет 27", function() {
        assert.equal(pow(3, 3), 27);
    });
    
});
/*
describe("заголовок", function() { ... })
    используется для группировки блоков it.

it("описание", function() { ... })
    задает описание и функцию, которая тестирует данный случай.

assert.equal(value1, value2)
    функции вида assert.* используются для проверки
*/


/*
before/after функции, которые будут выполняться до/после тестов, а также функции 
    beforeEach/afterEach, выполняемые до/после каждого it.
*/
describe("тест", function() {

    before(() => alert("Тестирование началось – перед тестами"));      // порядок выполн-я: 1
    after(() => alert("Тестирование закончилось – после всех тестов"));     // 8
  
    // для инициализации, обнуления счётчиков или чего-нибудь ещё
    beforeEach(() => alert("Перед тестом – начинаем выполнять тест"));      // 2, 5
    afterEach(() => alert("После теста – заканчиваем выполнение теста"));   // 4, 7
  
    it('тест 1', () => alert(1));                                           // 3
    it('тест 2', () => alert(2));                                           // 6
  
});


// В BDD сначала пишут спецификацию, а потом реализацию.
// Так работает BDD. Сначала мы добавляем тесты, которые падают, 
//      а уже потом пишем под них реализацию.

/*
assert.isNaN. Это проверка того, что переданное значение равно NaN.

Библиотека Chai содержит множество других подобных функций, например:

assert.equal(value1, value2) – проверяет равенство value1 == value2.
assert.strictEqual(value1, value2) – проверяет строгое равенство value1 === value2.
assert.notEqual, assert.notStrictEqual – проверяет неравенство и строгое неравенство соотв-но.
assert.isTrue(value) – проверяет, что value === true
assert.isFalse(value) – проверяет, что value === false
…с полным списком можно ознакомиться в документации

    */


// Можем изолировать один тест и запускать только его, написав it.only вместо it:
// Mocha будет запускать только этот блок
it.only("5 в степени 2 будет 25", function() {
    assert.equal(pow(5, 2), 25);
});