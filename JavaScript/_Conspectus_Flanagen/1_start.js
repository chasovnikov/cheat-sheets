//  console.error(), отличается от вывода, отображаемого с помощью console.log(),
// поскольку console.error() осуществляет запись в стандартный поток ошибок stderr.

// Node может читать свои аргументы командной строки через process.argv
// Может принимать ввод от переменных среды через process.env

// -----------------  Жизненный цикл программы
// Если не хотите, чтобы исключения приводили к полному отказу вашей программы,
// тогда зарегистрируйте функцию глобального обработчика:
process.setUncaughtExceptionCaptureCallback(e => {
    console.error('Uncaught exception:', e);
    // Неперехваченное исключение
});

// Перехват всех исключений для промисов:
process.on('unhandledRejection', (reason, promise) => {
    // reason - любое значение, которое передавалось бы вызову .catch ().
    // promise - объект Promise, который был отклонен.
});

// ------------------ Модули Node
// Модулb CommonJS подключаются через require() и module.exports и не разрешает
//      применять ключевые слова import и export.
// Для модулей ES6 - наоборот.
// Расширение файла .mjs - для ES6
// Расширение файла .cjs - для CommonJS
// Для других расширений Node смотрит package.json в той же папке или подпапках и
//      проверяет свойство type. Если его значение - "module", то загруз-ся как ES6,
//      а, если "commonjs" - CommonJS
// Если package.json не найден или нет type, то - CommonJS
// Node разрешает модулям ES6 загружать модули CommonJS, используя ключевое слово import,
//      но CommonJS не может применять require() для загрузки модуля ES6

// ------------------- Диспетчер пакетов Node
// Когда устанавливается пакет с помощью npm, то записывается зависимость в package.json
// > npm install    - устанавливает все пакеты из package.json

// Среда Node асинхронна по умолчанию
