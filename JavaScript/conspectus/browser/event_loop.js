
/**
 * Есть бесконечный цикл, в котором движок JavaScript ожидает и исполняет задачи.
 * Если задача поступает, но движок занят чем-то другим, тогда она ставится в очередь.
 * Такую очередь называют «очередью макрозадач» (macrotask queue, термин v8).
 * Задачи из очереди исполняются по правилу «первым пришёл – первым ушёл».
 * 
 * Микрозадачи приходят только из кода. Обычно они создаются промисами 
 *      или через queueMicrotask(f).
 * Сразу после каждой макрозадачи движок исполняет все задачи из очереди микрозадач 
 *      перед тем, как выполнить следующую макрозадачу.
 * 
 * Для длительных тяжёлых вычислений, которые не должны блокировать событийный цикл, 
 *      мы можем использовать Web Workers (исполнение кода в параллельном потоке).
 * Web Workers не имеют доступа к DOM.
 */

// Пример 1: разбиение «тяжёлой» задачи с помощью setTimeout
let i = 0;
let start = Date.now();

function count() {
  // перенесём планирование очередного вызова в начало
  if (i < 1e9 - 1e6) {
    setTimeout(count); // запланировать новый вызов
  }

  do {
    i++;
  } while (i % 1e6 != 0);

  if (i == 1e9) {
    alert("Done in " + (Date.now() - start) + 'ms');
  }
}
count();


// Пример 2: индикация прогресса
{/* <div id="progress"></div> */}
  let i = 0;

  function count() {
    // сделать часть крупной задачи (*)
    do {
      i++;
      progress.innerHTML = i;
    } while (i % 1e3 != 0);

    if (i < 1e7) {
      setTimeout(count);
    }
  }
  count();