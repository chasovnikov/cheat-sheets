
/**
 * Тип данных BigInt
 * 
 * В JavaScript тип «number» не может содержать числа больше, чем ((2**53)-1).
 * 
 * Math не работает с числами типа BigInt.
 * 
 * Нельзя применить унарный оператор "+".
 * 
 * Number и BigInt нельзя смешивать в операциях — они должны быть приведены к одному типу.
 * 
 * Точность BigInt может быть потеряна при приведении к числу (Number).
 * 
 * Результат операции с дробным результатом будет округлён в меньшую сторону 
 *      при использовании  BigInt.
 */

/**
 * 2 способа создания:
 */
const bigint1 = 10n;
const bigint2 = BigInt(10);     // bigint1 === bigint2

// BigInt можно использовать как обычные числа
1n + 2n      // 3

// BigInt равен Number только при нестрогом сравнении.
0n === 0    // false
0n == 0     // true

// Обычные числа и BigInt можно сравнивать как обычно.
1n < 2      // true

// Они могут быть смешаны в массивах и отсортированы:
[4n, 6, -12n, 10, 4, 0, 0n].sort(); // [-12n, 0, 0n, 10, 4n, 4, 6]

// BigInt преобразуется в boolean как обычное число
Boolean(0n)     // false
Boolean(12n)    // true


/**
 * BigInt.asIntN(width, bigint)
 *      Оборачивает BigInt в пределах от -2**width-1 до 2**width-1-1
 * @param width - Количество битов, доступных для целочисленного размера.
 * @param bigint - Целое число для зажима, чтобы соответствовать поставляемым битам.
 * @returns Значение bigint по модулю 2**width как целое число со знаком.
 */

/**
 * BigInt.asUintN(width, bigint)
 *      Оборачивает a BigInt в пределах от 0 до 2width-1
 * @param width - Количество битов, доступных для целочисленного размера.
 * @param bigint - Целое число для зажима, чтобы соответствовать поставляемым битам.
 * @returns Значение bigint по модулю 2**width как целое число со знаком.
 */