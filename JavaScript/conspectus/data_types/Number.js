
/**
 * Системы счисления.
 * Методы для преобразований из одной системы счисления в другую.
 * Методы округления чисел.
 * Неточные вычисления.
 */

 
let n = 123;        // целые числа
n = 12.345;         // дробные числа
123 === 123.0       // true
let billion = 1e9;  // 1 миллиард
let ms = 1e-6;      // 0.000001

/**
 * Есть только 3 системы счисления с такой поддержкой: 
 *      0b - двоичная
 *      0o - восьмеричная
 *      0x - шестнадцатиричная
 * Для других систем счисления используют parseInt()
 */
let a = 0b11111111; // 255 в бинарной форме
let b = 0o377;      // 255 в 8-ричной
a === b;            // true
Number('123')     // 123
Number('')        // 0
Number('0x11')    // 17
Number('0b11')    // 3
Number('0o11')    // 9
Number('foo')     // NaN

/**
 * num.toString(base) 
 * возвращает строковое представление числа num в системе счисления base
 * base может варьироваться от 2 до 36 (по умолчанию 10)
 */
let num = 255;
num.toString(16)  // ff  шестнадцатиричная
num.toString(2)   // 11111111  двоичная
255..toString(36) // ".." - Если нам надо вызвать метод непосредственно на числе


/**
 *      ОКРУГЛЕНИЕ
 * 
 * Math.floor(x)
 *      Округление в меньшую сторону: 3.1 становится 3, а -1.1 — -2.
 * Math.ceil(x)
 *      Округление в большую сторону: 3.1 становится 4, а -1.1 — -1.
 * Math.round(x)
 *      Округление до ближайшего целого: 3.1 становится 3, 3.6 — 4, а -1.1 — -1.
 * Math.trunc(x) (не поддерживается в Internet Explorer)
 *      Удаление дробной части без округления: 3.1 становится 3, а -1.1 — -1.
 * .toFixed(n) 
 *      Округляет число до n знаков после запятой и ВОЗРАЩАЕТ СТРОКУ
 */
let num = 12.34;
num.toFixed(5);     // "12.34000"



/**
 * Math.random()
 *      Возвращает псевдослучайное число в диапазоне 
 *      от 0 (включительно) до 1 (но не включая 1)
 * Math.max(a, b, c...) 
 * Math.min(a, b, c...)
 *      Возвращают наибольшее/наименьшее число из перечисленных аргументов.
 * Math.pow(n, power)
 *      Возвращает число n, возведённое в степень power
 */


/**
 * Неточные вычисления
 */
alert( 0.1 + 0.2 == 0.3 );   // false
alert( 0.1.toFixed(20) );    // 0.10000000000000000555

// Решение проблемы: округление
let sum = 0.1 + 0.2;
alert( sum.toFixed(2) );     // "0.30"

// метод умножения/деления уменьшает погрешность, но полностью её не решает
(0.1 * 10 + 0.2 * 10) / 10;      // 0.3
(0.28 * 100 + 0.14 * 100) / 100; // 0.4200000000000001


/**
 * Для явного преобразования к числу можно использовать "+" или Number(). 
 * Если строка не является в точности числом, то результат будет NaN:
 */
+"100px"; // NaN


/**
 * Object.is()
 * сравнивает значения примерно как ===, но более надёжен в двух особых ситуациях:
 * 1. Работает с NaN: Object.is(NaN, NaN) === true, здесь он хорош.
 * 2. Значения 0 и -0 разные: Object.is(0, -0) === false, 
 *          это редко используется, но технически эти значения разные.
 */


/**
 * new Number(value)    - объект-обёртка, позволяющая работать с числовыми значениями.
 * @param {any} value Значение, преобразуемое к числу, которое примет объект после создания
 */
const a = new Number('123'); // a === 123 is false
let b = Number('123');       // b === 123 is true
a instanceof Number;         // true
b instanceof Number;         // false


// Свойства:
Number.EPSILON           // Наименьший интервал между двумя числами
Number.MAX_VALUE         // Наибольшее положительное число
Number.MIN_VALUE         // Самое близкое к нулю положительное число
Number.MAX_SAFE_INTEGER  // Максимальное безопасное целое число (2**53 - 1)
Number.MIN_SAFE_INTEGER  // Минимальное безопасное целое число (-(2**53 - 1))
Number.NaN               // не число
Number.NEGATIVE_INFINITY // -Infinity
Number.POSITIVE_INFINITY // Infinity
Number.prototype         // Позволяет добавлять свойства к объекту Number


/**
 * Cпециальные числовые значения (явл-ся свойствами глобального объекта):
 * Infinity, -Infinity и NaN.
 * 
 * Infinity - математическая бесконечность.
 *      Number.POSITIVE_INFINITY.
 *      Возвр-ся при переполнении, делении на 0 или явном задании. 
 *      Любое положительное число, умноженное на Infinity даёт Infinity, 
 *          а любое число, делённое на Infinity даёт 0.
 * NaN - не-число (Not-A-Number). 
 *      Number.NaN
 *      NaN ничему не равно. 
 *      Для определения исп-ся 
 *          Number.isNaN(),
 *          isNaN(),
 *          NaN !== NaN.
 * 
 * Object.is(NaN, NaN) === true
 */

/**
 * Методы:
 * 
 * Методы, унаследованные из Function:
 *      apply, call, toSource, toString
 */

/**
 * isNaN(x)
 * Вернёт true, если значение в настоящий момент является NaN, 
 *      или если оно станет NaN после того, как преобразуется в число
 */
isNaN('hello world')        // true

// Вернёт true, только если ТЕКУЩИМ значением является NaN
Number.isNaN('hello world') // false

/**
 * Определяет, является ли переданное значение конечным числом.
 * Преобразует параметр в число.
 */
isFinite()

/**
 * Определяет, является ли переданное значение конечным числом.
 * Не преобразует параметр в число.
 */
Number.isFinite(Infinity)  // false
Number.isFinite(NaN)       // false 
Number.isFinite(0)         // true 
Number.isFinite('0')       // false !!!
isFinite('0')              // true !!!

// Проверка на целое число
Number.isInteger(1);         // true
Number.isInteger(-100000);   // true
Number.isInteger(5.0);       // true
Number.isInteger(0.1);       // false
Number.isInteger('10');      // false

// проверка на целочисленную «безопасность»
Number.isSafeInteger(3)     // true
Number.isSafeInteger(3.1)   // false

/**
 * Разбирает строку и возвращает число с плавающей запятой.
 * Ведёт себя идентично глобальной функции parseFloat()
 */
Number.parseFloat()

/**
 * Разбирает строку и возвращает целое число в указанной системе счисления
 * Ведёт себя идентично глобальной функции parseInt()
 */
Number.parseInt('12px', 10) // 10 - система счисления


/**
 * parseInt и parseFloat.
 * Они «читают» число из строки.
 * Если в процессе чтения возникает ошибка, они возвращают полученное 
 * до ошибки число. Функция parseInt возвращает целое число, 
 * а parseFloat возвращает число с плавающей точкой
 */
 alert( parseInt('100px') ); // 100
 alert( parseFloat('12.5em') ); // 12.5
 alert( parseInt('12.3') ); // 12, вернётся только целая часть
 alert( parseFloat('12.3.4') ); // 12.3, произойдёт остановка чтения на второй точке
 alert( parseInt('a123') ); // NaN, на первом символе происходит остановка чтения
 
 // Второй аргумент parseInt(str, radix) - система счисления
 alert( parseInt('0xff', 16) ); // 255
 alert( parseInt('ff', 16) ); // 255, без 0x тоже работает
 alert( parseInt('2n9c', 36) ); // 123456

/**
 * Math.sign(num)
 *      возвращает знак числа, указывающий на то, является ли число отрицательным, 
 *      положительным или нулём.
 */
Math.sign('-3');  // -1
Math.sign(0);     //  0
Math.sign(-0);    // -0

/**
 * Math.sqrt(x)
 *      Возвращает положительный квадратный корень числа.
 */
Math.sqrt(9); // 3  (3**2 == 9)